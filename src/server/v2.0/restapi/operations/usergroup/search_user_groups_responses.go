// Code generated by go-swagger; DO NOT EDIT.

package usergroup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// SearchUserGroupsOKCode is the HTTP code returned for type SearchUserGroupsOK
const SearchUserGroupsOKCode int = 200

/*SearchUserGroupsOK Search groups successfully.

swagger:response searchUserGroupsOK
*/
type SearchUserGroupsOK struct {
	/*Link to previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of available items

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.UserGroupSearchItem `json:"body,omitempty"`
}

// NewSearchUserGroupsOK creates SearchUserGroupsOK with default headers values
func NewSearchUserGroupsOK() *SearchUserGroupsOK {

	return &SearchUserGroupsOK{}
}

// WithLink adds the link to the search user groups o k response
func (o *SearchUserGroupsOK) WithLink(link string) *SearchUserGroupsOK {
	o.Link = link
	return o
}

// SetLink sets the link to the search user groups o k response
func (o *SearchUserGroupsOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the search user groups o k response
func (o *SearchUserGroupsOK) WithXTotalCount(xTotalCount int64) *SearchUserGroupsOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the search user groups o k response
func (o *SearchUserGroupsOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the search user groups o k response
func (o *SearchUserGroupsOK) WithPayload(payload []*models.UserGroupSearchItem) *SearchUserGroupsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search user groups o k response
func (o *SearchUserGroupsOK) SetPayload(payload []*models.UserGroupSearchItem) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchUserGroupsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.UserGroupSearchItem, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// SearchUserGroupsUnauthorizedCode is the HTTP code returned for type SearchUserGroupsUnauthorized
const SearchUserGroupsUnauthorizedCode int = 401

/*SearchUserGroupsUnauthorized Unauthorized

swagger:response searchUserGroupsUnauthorized
*/
type SearchUserGroupsUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSearchUserGroupsUnauthorized creates SearchUserGroupsUnauthorized with default headers values
func NewSearchUserGroupsUnauthorized() *SearchUserGroupsUnauthorized {

	return &SearchUserGroupsUnauthorized{}
}

// WithXRequestID adds the xRequestId to the search user groups unauthorized response
func (o *SearchUserGroupsUnauthorized) WithXRequestID(xRequestID string) *SearchUserGroupsUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the search user groups unauthorized response
func (o *SearchUserGroupsUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the search user groups unauthorized response
func (o *SearchUserGroupsUnauthorized) WithPayload(payload *models.Errors) *SearchUserGroupsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search user groups unauthorized response
func (o *SearchUserGroupsUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchUserGroupsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchUserGroupsInternalServerErrorCode is the HTTP code returned for type SearchUserGroupsInternalServerError
const SearchUserGroupsInternalServerErrorCode int = 500

/*SearchUserGroupsInternalServerError Internal server error

swagger:response searchUserGroupsInternalServerError
*/
type SearchUserGroupsInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewSearchUserGroupsInternalServerError creates SearchUserGroupsInternalServerError with default headers values
func NewSearchUserGroupsInternalServerError() *SearchUserGroupsInternalServerError {

	return &SearchUserGroupsInternalServerError{}
}

// WithXRequestID adds the xRequestId to the search user groups internal server error response
func (o *SearchUserGroupsInternalServerError) WithXRequestID(xRequestID string) *SearchUserGroupsInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the search user groups internal server error response
func (o *SearchUserGroupsInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the search user groups internal server error response
func (o *SearchUserGroupsInternalServerError) WithPayload(payload *models.Errors) *SearchUserGroupsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search user groups internal server error response
func (o *SearchUserGroupsInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchUserGroupsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
