// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// StopPurgeHandlerFunc turns a function with the right signature into a stop purge handler
type StopPurgeHandlerFunc func(StopPurgeParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn StopPurgeHandlerFunc) Handle(params StopPurgeParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// StopPurgeHandler interface for that can handle valid stop purge params
type StopPurgeHandler interface {
	Handle(StopPurgeParams, interface{}) middleware.Responder
}

// NewStopPurge creates a new http.Handler for the stop purge operation
func NewStopPurge(ctx *middleware.Context, handler StopPurgeHandler) *StopPurge {
	return &StopPurge{Context: ctx, Handler: handler}
}

/*StopPurge swagger:route PUT /system/purgeaudit/{purge_id} purge stopPurge

Stop the specific purge audit log execution

Stop the purge audit log execution specified by ID

*/
type StopPurge struct {
	Context *middleware.Context
	Handler StopPurgeHandler
}

func (o *StopPurge) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStopPurgeParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
