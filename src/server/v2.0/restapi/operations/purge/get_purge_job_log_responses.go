// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetPurgeJobLogOKCode is the HTTP code returned for type GetPurgeJobLogOK
const GetPurgeJobLogOKCode int = 200

/*GetPurgeJobLogOK Get successfully.

swagger:response getPurgeJobLogOK
*/
type GetPurgeJobLogOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetPurgeJobLogOK creates GetPurgeJobLogOK with default headers values
func NewGetPurgeJobLogOK() *GetPurgeJobLogOK {

	return &GetPurgeJobLogOK{}
}

// WithPayload adds the payload to the get purge job log o k response
func (o *GetPurgeJobLogOK) WithPayload(payload string) *GetPurgeJobLogOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge job log o k response
func (o *GetPurgeJobLogOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeJobLogOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetPurgeJobLogBadRequestCode is the HTTP code returned for type GetPurgeJobLogBadRequest
const GetPurgeJobLogBadRequestCode int = 400

/*GetPurgeJobLogBadRequest Bad request

swagger:response getPurgeJobLogBadRequest
*/
type GetPurgeJobLogBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeJobLogBadRequest creates GetPurgeJobLogBadRequest with default headers values
func NewGetPurgeJobLogBadRequest() *GetPurgeJobLogBadRequest {

	return &GetPurgeJobLogBadRequest{}
}

// WithXRequestID adds the xRequestId to the get purge job log bad request response
func (o *GetPurgeJobLogBadRequest) WithXRequestID(xRequestID string) *GetPurgeJobLogBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge job log bad request response
func (o *GetPurgeJobLogBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge job log bad request response
func (o *GetPurgeJobLogBadRequest) WithPayload(payload *models.Errors) *GetPurgeJobLogBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge job log bad request response
func (o *GetPurgeJobLogBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeJobLogBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeJobLogUnauthorizedCode is the HTTP code returned for type GetPurgeJobLogUnauthorized
const GetPurgeJobLogUnauthorizedCode int = 401

/*GetPurgeJobLogUnauthorized Unauthorized

swagger:response getPurgeJobLogUnauthorized
*/
type GetPurgeJobLogUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeJobLogUnauthorized creates GetPurgeJobLogUnauthorized with default headers values
func NewGetPurgeJobLogUnauthorized() *GetPurgeJobLogUnauthorized {

	return &GetPurgeJobLogUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get purge job log unauthorized response
func (o *GetPurgeJobLogUnauthorized) WithXRequestID(xRequestID string) *GetPurgeJobLogUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge job log unauthorized response
func (o *GetPurgeJobLogUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge job log unauthorized response
func (o *GetPurgeJobLogUnauthorized) WithPayload(payload *models.Errors) *GetPurgeJobLogUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge job log unauthorized response
func (o *GetPurgeJobLogUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeJobLogUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeJobLogForbiddenCode is the HTTP code returned for type GetPurgeJobLogForbidden
const GetPurgeJobLogForbiddenCode int = 403

/*GetPurgeJobLogForbidden Forbidden

swagger:response getPurgeJobLogForbidden
*/
type GetPurgeJobLogForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeJobLogForbidden creates GetPurgeJobLogForbidden with default headers values
func NewGetPurgeJobLogForbidden() *GetPurgeJobLogForbidden {

	return &GetPurgeJobLogForbidden{}
}

// WithXRequestID adds the xRequestId to the get purge job log forbidden response
func (o *GetPurgeJobLogForbidden) WithXRequestID(xRequestID string) *GetPurgeJobLogForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge job log forbidden response
func (o *GetPurgeJobLogForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge job log forbidden response
func (o *GetPurgeJobLogForbidden) WithPayload(payload *models.Errors) *GetPurgeJobLogForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge job log forbidden response
func (o *GetPurgeJobLogForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeJobLogForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeJobLogNotFoundCode is the HTTP code returned for type GetPurgeJobLogNotFound
const GetPurgeJobLogNotFoundCode int = 404

/*GetPurgeJobLogNotFound Not found

swagger:response getPurgeJobLogNotFound
*/
type GetPurgeJobLogNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeJobLogNotFound creates GetPurgeJobLogNotFound with default headers values
func NewGetPurgeJobLogNotFound() *GetPurgeJobLogNotFound {

	return &GetPurgeJobLogNotFound{}
}

// WithXRequestID adds the xRequestId to the get purge job log not found response
func (o *GetPurgeJobLogNotFound) WithXRequestID(xRequestID string) *GetPurgeJobLogNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge job log not found response
func (o *GetPurgeJobLogNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge job log not found response
func (o *GetPurgeJobLogNotFound) WithPayload(payload *models.Errors) *GetPurgeJobLogNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge job log not found response
func (o *GetPurgeJobLogNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeJobLogNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeJobLogInternalServerErrorCode is the HTTP code returned for type GetPurgeJobLogInternalServerError
const GetPurgeJobLogInternalServerErrorCode int = 500

/*GetPurgeJobLogInternalServerError Internal server error

swagger:response getPurgeJobLogInternalServerError
*/
type GetPurgeJobLogInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeJobLogInternalServerError creates GetPurgeJobLogInternalServerError with default headers values
func NewGetPurgeJobLogInternalServerError() *GetPurgeJobLogInternalServerError {

	return &GetPurgeJobLogInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get purge job log internal server error response
func (o *GetPurgeJobLogInternalServerError) WithXRequestID(xRequestID string) *GetPurgeJobLogInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge job log internal server error response
func (o *GetPurgeJobLogInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge job log internal server error response
func (o *GetPurgeJobLogInternalServerError) WithPayload(payload *models.Errors) *GetPurgeJobLogInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge job log internal server error response
func (o *GetPurgeJobLogInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeJobLogInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
