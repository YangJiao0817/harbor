// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// StopPurgeOKCode is the HTTP code returned for type StopPurgeOK
const StopPurgeOKCode int = 200

/*StopPurgeOK Success

swagger:response stopPurgeOK
*/
type StopPurgeOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewStopPurgeOK creates StopPurgeOK with default headers values
func NewStopPurgeOK() *StopPurgeOK {

	return &StopPurgeOK{}
}

// WithXRequestID adds the xRequestId to the stop purge o k response
func (o *StopPurgeOK) WithXRequestID(xRequestID string) *StopPurgeOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop purge o k response
func (o *StopPurgeOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *StopPurgeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// StopPurgeUnauthorizedCode is the HTTP code returned for type StopPurgeUnauthorized
const StopPurgeUnauthorizedCode int = 401

/*StopPurgeUnauthorized Unauthorized

swagger:response stopPurgeUnauthorized
*/
type StopPurgeUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopPurgeUnauthorized creates StopPurgeUnauthorized with default headers values
func NewStopPurgeUnauthorized() *StopPurgeUnauthorized {

	return &StopPurgeUnauthorized{}
}

// WithXRequestID adds the xRequestId to the stop purge unauthorized response
func (o *StopPurgeUnauthorized) WithXRequestID(xRequestID string) *StopPurgeUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop purge unauthorized response
func (o *StopPurgeUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop purge unauthorized response
func (o *StopPurgeUnauthorized) WithPayload(payload *models.Errors) *StopPurgeUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop purge unauthorized response
func (o *StopPurgeUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopPurgeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopPurgeForbiddenCode is the HTTP code returned for type StopPurgeForbidden
const StopPurgeForbiddenCode int = 403

/*StopPurgeForbidden Forbidden

swagger:response stopPurgeForbidden
*/
type StopPurgeForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopPurgeForbidden creates StopPurgeForbidden with default headers values
func NewStopPurgeForbidden() *StopPurgeForbidden {

	return &StopPurgeForbidden{}
}

// WithXRequestID adds the xRequestId to the stop purge forbidden response
func (o *StopPurgeForbidden) WithXRequestID(xRequestID string) *StopPurgeForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop purge forbidden response
func (o *StopPurgeForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop purge forbidden response
func (o *StopPurgeForbidden) WithPayload(payload *models.Errors) *StopPurgeForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop purge forbidden response
func (o *StopPurgeForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopPurgeForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopPurgeNotFoundCode is the HTTP code returned for type StopPurgeNotFound
const StopPurgeNotFoundCode int = 404

/*StopPurgeNotFound Not found

swagger:response stopPurgeNotFound
*/
type StopPurgeNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopPurgeNotFound creates StopPurgeNotFound with default headers values
func NewStopPurgeNotFound() *StopPurgeNotFound {

	return &StopPurgeNotFound{}
}

// WithXRequestID adds the xRequestId to the stop purge not found response
func (o *StopPurgeNotFound) WithXRequestID(xRequestID string) *StopPurgeNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop purge not found response
func (o *StopPurgeNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop purge not found response
func (o *StopPurgeNotFound) WithPayload(payload *models.Errors) *StopPurgeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop purge not found response
func (o *StopPurgeNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopPurgeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopPurgeInternalServerErrorCode is the HTTP code returned for type StopPurgeInternalServerError
const StopPurgeInternalServerErrorCode int = 500

/*StopPurgeInternalServerError Internal server error

swagger:response stopPurgeInternalServerError
*/
type StopPurgeInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopPurgeInternalServerError creates StopPurgeInternalServerError with default headers values
func NewStopPurgeInternalServerError() *StopPurgeInternalServerError {

	return &StopPurgeInternalServerError{}
}

// WithXRequestID adds the xRequestId to the stop purge internal server error response
func (o *StopPurgeInternalServerError) WithXRequestID(xRequestID string) *StopPurgeInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop purge internal server error response
func (o *StopPurgeInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop purge internal server error response
func (o *StopPurgeInternalServerError) WithPayload(payload *models.Errors) *StopPurgeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop purge internal server error response
func (o *StopPurgeInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopPurgeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
