// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetPurgeScheduleOKCode is the HTTP code returned for type GetPurgeScheduleOK
const GetPurgeScheduleOKCode int = 200

/*GetPurgeScheduleOK Get purge job's schedule.

swagger:response getPurgeScheduleOK
*/
type GetPurgeScheduleOK struct {

	/*
	  In: Body
	*/
	Payload *models.ExecHistory `json:"body,omitempty"`
}

// NewGetPurgeScheduleOK creates GetPurgeScheduleOK with default headers values
func NewGetPurgeScheduleOK() *GetPurgeScheduleOK {

	return &GetPurgeScheduleOK{}
}

// WithPayload adds the payload to the get purge schedule o k response
func (o *GetPurgeScheduleOK) WithPayload(payload *models.ExecHistory) *GetPurgeScheduleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge schedule o k response
func (o *GetPurgeScheduleOK) SetPayload(payload *models.ExecHistory) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeScheduleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeScheduleUnauthorizedCode is the HTTP code returned for type GetPurgeScheduleUnauthorized
const GetPurgeScheduleUnauthorizedCode int = 401

/*GetPurgeScheduleUnauthorized Unauthorized

swagger:response getPurgeScheduleUnauthorized
*/
type GetPurgeScheduleUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeScheduleUnauthorized creates GetPurgeScheduleUnauthorized with default headers values
func NewGetPurgeScheduleUnauthorized() *GetPurgeScheduleUnauthorized {

	return &GetPurgeScheduleUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get purge schedule unauthorized response
func (o *GetPurgeScheduleUnauthorized) WithXRequestID(xRequestID string) *GetPurgeScheduleUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge schedule unauthorized response
func (o *GetPurgeScheduleUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge schedule unauthorized response
func (o *GetPurgeScheduleUnauthorized) WithPayload(payload *models.Errors) *GetPurgeScheduleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge schedule unauthorized response
func (o *GetPurgeScheduleUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeScheduleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeScheduleForbiddenCode is the HTTP code returned for type GetPurgeScheduleForbidden
const GetPurgeScheduleForbiddenCode int = 403

/*GetPurgeScheduleForbidden Forbidden

swagger:response getPurgeScheduleForbidden
*/
type GetPurgeScheduleForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeScheduleForbidden creates GetPurgeScheduleForbidden with default headers values
func NewGetPurgeScheduleForbidden() *GetPurgeScheduleForbidden {

	return &GetPurgeScheduleForbidden{}
}

// WithXRequestID adds the xRequestId to the get purge schedule forbidden response
func (o *GetPurgeScheduleForbidden) WithXRequestID(xRequestID string) *GetPurgeScheduleForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge schedule forbidden response
func (o *GetPurgeScheduleForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge schedule forbidden response
func (o *GetPurgeScheduleForbidden) WithPayload(payload *models.Errors) *GetPurgeScheduleForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge schedule forbidden response
func (o *GetPurgeScheduleForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeScheduleForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeScheduleInternalServerErrorCode is the HTTP code returned for type GetPurgeScheduleInternalServerError
const GetPurgeScheduleInternalServerErrorCode int = 500

/*GetPurgeScheduleInternalServerError Internal server error

swagger:response getPurgeScheduleInternalServerError
*/
type GetPurgeScheduleInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeScheduleInternalServerError creates GetPurgeScheduleInternalServerError with default headers values
func NewGetPurgeScheduleInternalServerError() *GetPurgeScheduleInternalServerError {

	return &GetPurgeScheduleInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get purge schedule internal server error response
func (o *GetPurgeScheduleInternalServerError) WithXRequestID(xRequestID string) *GetPurgeScheduleInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge schedule internal server error response
func (o *GetPurgeScheduleInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge schedule internal server error response
func (o *GetPurgeScheduleInternalServerError) WithPayload(payload *models.Errors) *GetPurgeScheduleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge schedule internal server error response
func (o *GetPurgeScheduleInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeScheduleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
