// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetPurgeJobOKCode is the HTTP code returned for type GetPurgeJobOK
const GetPurgeJobOKCode int = 200

/*GetPurgeJobOK Get purge job results successfully.

swagger:response getPurgeJobOK
*/
type GetPurgeJobOK struct {

	/*
	  In: Body
	*/
	Payload *models.ExecHistory `json:"body,omitempty"`
}

// NewGetPurgeJobOK creates GetPurgeJobOK with default headers values
func NewGetPurgeJobOK() *GetPurgeJobOK {

	return &GetPurgeJobOK{}
}

// WithPayload adds the payload to the get purge job o k response
func (o *GetPurgeJobOK) WithPayload(payload *models.ExecHistory) *GetPurgeJobOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge job o k response
func (o *GetPurgeJobOK) SetPayload(payload *models.ExecHistory) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeJobOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeJobUnauthorizedCode is the HTTP code returned for type GetPurgeJobUnauthorized
const GetPurgeJobUnauthorizedCode int = 401

/*GetPurgeJobUnauthorized Unauthorized

swagger:response getPurgeJobUnauthorized
*/
type GetPurgeJobUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeJobUnauthorized creates GetPurgeJobUnauthorized with default headers values
func NewGetPurgeJobUnauthorized() *GetPurgeJobUnauthorized {

	return &GetPurgeJobUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get purge job unauthorized response
func (o *GetPurgeJobUnauthorized) WithXRequestID(xRequestID string) *GetPurgeJobUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge job unauthorized response
func (o *GetPurgeJobUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge job unauthorized response
func (o *GetPurgeJobUnauthorized) WithPayload(payload *models.Errors) *GetPurgeJobUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge job unauthorized response
func (o *GetPurgeJobUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeJobUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeJobForbiddenCode is the HTTP code returned for type GetPurgeJobForbidden
const GetPurgeJobForbiddenCode int = 403

/*GetPurgeJobForbidden Forbidden

swagger:response getPurgeJobForbidden
*/
type GetPurgeJobForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeJobForbidden creates GetPurgeJobForbidden with default headers values
func NewGetPurgeJobForbidden() *GetPurgeJobForbidden {

	return &GetPurgeJobForbidden{}
}

// WithXRequestID adds the xRequestId to the get purge job forbidden response
func (o *GetPurgeJobForbidden) WithXRequestID(xRequestID string) *GetPurgeJobForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge job forbidden response
func (o *GetPurgeJobForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge job forbidden response
func (o *GetPurgeJobForbidden) WithPayload(payload *models.Errors) *GetPurgeJobForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge job forbidden response
func (o *GetPurgeJobForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeJobForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeJobNotFoundCode is the HTTP code returned for type GetPurgeJobNotFound
const GetPurgeJobNotFoundCode int = 404

/*GetPurgeJobNotFound Not found

swagger:response getPurgeJobNotFound
*/
type GetPurgeJobNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeJobNotFound creates GetPurgeJobNotFound with default headers values
func NewGetPurgeJobNotFound() *GetPurgeJobNotFound {

	return &GetPurgeJobNotFound{}
}

// WithXRequestID adds the xRequestId to the get purge job not found response
func (o *GetPurgeJobNotFound) WithXRequestID(xRequestID string) *GetPurgeJobNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge job not found response
func (o *GetPurgeJobNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge job not found response
func (o *GetPurgeJobNotFound) WithPayload(payload *models.Errors) *GetPurgeJobNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge job not found response
func (o *GetPurgeJobNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeJobNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeJobInternalServerErrorCode is the HTTP code returned for type GetPurgeJobInternalServerError
const GetPurgeJobInternalServerErrorCode int = 500

/*GetPurgeJobInternalServerError Internal server error

swagger:response getPurgeJobInternalServerError
*/
type GetPurgeJobInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeJobInternalServerError creates GetPurgeJobInternalServerError with default headers values
func NewGetPurgeJobInternalServerError() *GetPurgeJobInternalServerError {

	return &GetPurgeJobInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get purge job internal server error response
func (o *GetPurgeJobInternalServerError) WithXRequestID(xRequestID string) *GetPurgeJobInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge job internal server error response
func (o *GetPurgeJobInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge job internal server error response
func (o *GetPurgeJobInternalServerError) WithPayload(payload *models.Errors) *GetPurgeJobInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge job internal server error response
func (o *GetPurgeJobInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeJobInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
