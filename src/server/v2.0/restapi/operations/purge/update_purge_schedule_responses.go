// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// UpdatePurgeScheduleOKCode is the HTTP code returned for type UpdatePurgeScheduleOK
const UpdatePurgeScheduleOKCode int = 200

/*UpdatePurgeScheduleOK Updated purge's schedule successfully.

swagger:response updatePurgeScheduleOK
*/
type UpdatePurgeScheduleOK struct {
}

// NewUpdatePurgeScheduleOK creates UpdatePurgeScheduleOK with default headers values
func NewUpdatePurgeScheduleOK() *UpdatePurgeScheduleOK {

	return &UpdatePurgeScheduleOK{}
}

// WriteResponse to the client
func (o *UpdatePurgeScheduleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdatePurgeScheduleBadRequestCode is the HTTP code returned for type UpdatePurgeScheduleBadRequest
const UpdatePurgeScheduleBadRequestCode int = 400

/*UpdatePurgeScheduleBadRequest Bad request

swagger:response updatePurgeScheduleBadRequest
*/
type UpdatePurgeScheduleBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdatePurgeScheduleBadRequest creates UpdatePurgeScheduleBadRequest with default headers values
func NewUpdatePurgeScheduleBadRequest() *UpdatePurgeScheduleBadRequest {

	return &UpdatePurgeScheduleBadRequest{}
}

// WithXRequestID adds the xRequestId to the update purge schedule bad request response
func (o *UpdatePurgeScheduleBadRequest) WithXRequestID(xRequestID string) *UpdatePurgeScheduleBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update purge schedule bad request response
func (o *UpdatePurgeScheduleBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update purge schedule bad request response
func (o *UpdatePurgeScheduleBadRequest) WithPayload(payload *models.Errors) *UpdatePurgeScheduleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update purge schedule bad request response
func (o *UpdatePurgeScheduleBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePurgeScheduleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdatePurgeScheduleUnauthorizedCode is the HTTP code returned for type UpdatePurgeScheduleUnauthorized
const UpdatePurgeScheduleUnauthorizedCode int = 401

/*UpdatePurgeScheduleUnauthorized Unauthorized

swagger:response updatePurgeScheduleUnauthorized
*/
type UpdatePurgeScheduleUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdatePurgeScheduleUnauthorized creates UpdatePurgeScheduleUnauthorized with default headers values
func NewUpdatePurgeScheduleUnauthorized() *UpdatePurgeScheduleUnauthorized {

	return &UpdatePurgeScheduleUnauthorized{}
}

// WithXRequestID adds the xRequestId to the update purge schedule unauthorized response
func (o *UpdatePurgeScheduleUnauthorized) WithXRequestID(xRequestID string) *UpdatePurgeScheduleUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update purge schedule unauthorized response
func (o *UpdatePurgeScheduleUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update purge schedule unauthorized response
func (o *UpdatePurgeScheduleUnauthorized) WithPayload(payload *models.Errors) *UpdatePurgeScheduleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update purge schedule unauthorized response
func (o *UpdatePurgeScheduleUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePurgeScheduleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdatePurgeScheduleForbiddenCode is the HTTP code returned for type UpdatePurgeScheduleForbidden
const UpdatePurgeScheduleForbiddenCode int = 403

/*UpdatePurgeScheduleForbidden Forbidden

swagger:response updatePurgeScheduleForbidden
*/
type UpdatePurgeScheduleForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdatePurgeScheduleForbidden creates UpdatePurgeScheduleForbidden with default headers values
func NewUpdatePurgeScheduleForbidden() *UpdatePurgeScheduleForbidden {

	return &UpdatePurgeScheduleForbidden{}
}

// WithXRequestID adds the xRequestId to the update purge schedule forbidden response
func (o *UpdatePurgeScheduleForbidden) WithXRequestID(xRequestID string) *UpdatePurgeScheduleForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update purge schedule forbidden response
func (o *UpdatePurgeScheduleForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update purge schedule forbidden response
func (o *UpdatePurgeScheduleForbidden) WithPayload(payload *models.Errors) *UpdatePurgeScheduleForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update purge schedule forbidden response
func (o *UpdatePurgeScheduleForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePurgeScheduleForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdatePurgeScheduleInternalServerErrorCode is the HTTP code returned for type UpdatePurgeScheduleInternalServerError
const UpdatePurgeScheduleInternalServerErrorCode int = 500

/*UpdatePurgeScheduleInternalServerError Internal server error

swagger:response updatePurgeScheduleInternalServerError
*/
type UpdatePurgeScheduleInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewUpdatePurgeScheduleInternalServerError creates UpdatePurgeScheduleInternalServerError with default headers values
func NewUpdatePurgeScheduleInternalServerError() *UpdatePurgeScheduleInternalServerError {

	return &UpdatePurgeScheduleInternalServerError{}
}

// WithXRequestID adds the xRequestId to the update purge schedule internal server error response
func (o *UpdatePurgeScheduleInternalServerError) WithXRequestID(xRequestID string) *UpdatePurgeScheduleInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the update purge schedule internal server error response
func (o *UpdatePurgeScheduleInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the update purge schedule internal server error response
func (o *UpdatePurgeScheduleInternalServerError) WithPayload(payload *models.Errors) *UpdatePurgeScheduleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update purge schedule internal server error response
func (o *UpdatePurgeScheduleInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdatePurgeScheduleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
