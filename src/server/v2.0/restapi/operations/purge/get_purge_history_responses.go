// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetPurgeHistoryOKCode is the HTTP code returned for type GetPurgeHistoryOK
const GetPurgeHistoryOKCode int = 200

/*GetPurgeHistoryOK Get purge job results successfully.

swagger:response getPurgeHistoryOK
*/
type GetPurgeHistoryOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of history

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.ExecHistory `json:"body,omitempty"`
}

// NewGetPurgeHistoryOK creates GetPurgeHistoryOK with default headers values
func NewGetPurgeHistoryOK() *GetPurgeHistoryOK {

	return &GetPurgeHistoryOK{}
}

// WithLink adds the link to the get purge history o k response
func (o *GetPurgeHistoryOK) WithLink(link string) *GetPurgeHistoryOK {
	o.Link = link
	return o
}

// SetLink sets the link to the get purge history o k response
func (o *GetPurgeHistoryOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the get purge history o k response
func (o *GetPurgeHistoryOK) WithXTotalCount(xTotalCount int64) *GetPurgeHistoryOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the get purge history o k response
func (o *GetPurgeHistoryOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the get purge history o k response
func (o *GetPurgeHistoryOK) WithPayload(payload []*models.ExecHistory) *GetPurgeHistoryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge history o k response
func (o *GetPurgeHistoryOK) SetPayload(payload []*models.ExecHistory) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeHistoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ExecHistory, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetPurgeHistoryUnauthorizedCode is the HTTP code returned for type GetPurgeHistoryUnauthorized
const GetPurgeHistoryUnauthorizedCode int = 401

/*GetPurgeHistoryUnauthorized Unauthorized

swagger:response getPurgeHistoryUnauthorized
*/
type GetPurgeHistoryUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeHistoryUnauthorized creates GetPurgeHistoryUnauthorized with default headers values
func NewGetPurgeHistoryUnauthorized() *GetPurgeHistoryUnauthorized {

	return &GetPurgeHistoryUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get purge history unauthorized response
func (o *GetPurgeHistoryUnauthorized) WithXRequestID(xRequestID string) *GetPurgeHistoryUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge history unauthorized response
func (o *GetPurgeHistoryUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge history unauthorized response
func (o *GetPurgeHistoryUnauthorized) WithPayload(payload *models.Errors) *GetPurgeHistoryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge history unauthorized response
func (o *GetPurgeHistoryUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeHistoryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeHistoryForbiddenCode is the HTTP code returned for type GetPurgeHistoryForbidden
const GetPurgeHistoryForbiddenCode int = 403

/*GetPurgeHistoryForbidden Forbidden

swagger:response getPurgeHistoryForbidden
*/
type GetPurgeHistoryForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeHistoryForbidden creates GetPurgeHistoryForbidden with default headers values
func NewGetPurgeHistoryForbidden() *GetPurgeHistoryForbidden {

	return &GetPurgeHistoryForbidden{}
}

// WithXRequestID adds the xRequestId to the get purge history forbidden response
func (o *GetPurgeHistoryForbidden) WithXRequestID(xRequestID string) *GetPurgeHistoryForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge history forbidden response
func (o *GetPurgeHistoryForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge history forbidden response
func (o *GetPurgeHistoryForbidden) WithPayload(payload *models.Errors) *GetPurgeHistoryForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge history forbidden response
func (o *GetPurgeHistoryForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeHistoryForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPurgeHistoryInternalServerErrorCode is the HTTP code returned for type GetPurgeHistoryInternalServerError
const GetPurgeHistoryInternalServerErrorCode int = 500

/*GetPurgeHistoryInternalServerError Internal server error

swagger:response getPurgeHistoryInternalServerError
*/
type GetPurgeHistoryInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetPurgeHistoryInternalServerError creates GetPurgeHistoryInternalServerError with default headers values
func NewGetPurgeHistoryInternalServerError() *GetPurgeHistoryInternalServerError {

	return &GetPurgeHistoryInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get purge history internal server error response
func (o *GetPurgeHistoryInternalServerError) WithXRequestID(xRequestID string) *GetPurgeHistoryInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get purge history internal server error response
func (o *GetPurgeHistoryInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get purge history internal server error response
func (o *GetPurgeHistoryInternalServerError) WithPayload(payload *models.Errors) *GetPurgeHistoryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get purge history internal server error response
func (o *GetPurgeHistoryInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPurgeHistoryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
