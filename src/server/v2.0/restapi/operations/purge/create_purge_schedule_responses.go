// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// CreatePurgeScheduleCreatedCode is the HTTP code returned for type CreatePurgeScheduleCreated
const CreatePurgeScheduleCreatedCode int = 201

/*CreatePurgeScheduleCreated Created

swagger:response createPurgeScheduleCreated
*/
type CreatePurgeScheduleCreated struct {
	/*The location of the resource

	 */
	Location string `json:"Location"`
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewCreatePurgeScheduleCreated creates CreatePurgeScheduleCreated with default headers values
func NewCreatePurgeScheduleCreated() *CreatePurgeScheduleCreated {

	return &CreatePurgeScheduleCreated{}
}

// WithLocation adds the location to the create purge schedule created response
func (o *CreatePurgeScheduleCreated) WithLocation(location string) *CreatePurgeScheduleCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create purge schedule created response
func (o *CreatePurgeScheduleCreated) SetLocation(location string) {
	o.Location = location
}

// WithXRequestID adds the xRequestId to the create purge schedule created response
func (o *CreatePurgeScheduleCreated) WithXRequestID(xRequestID string) *CreatePurgeScheduleCreated {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create purge schedule created response
func (o *CreatePurgeScheduleCreated) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *CreatePurgeScheduleCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Location

	location := o.Location
	if location != "" {
		rw.Header().Set("Location", location)
	}

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreatePurgeScheduleBadRequestCode is the HTTP code returned for type CreatePurgeScheduleBadRequest
const CreatePurgeScheduleBadRequestCode int = 400

/*CreatePurgeScheduleBadRequest Bad request

swagger:response createPurgeScheduleBadRequest
*/
type CreatePurgeScheduleBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreatePurgeScheduleBadRequest creates CreatePurgeScheduleBadRequest with default headers values
func NewCreatePurgeScheduleBadRequest() *CreatePurgeScheduleBadRequest {

	return &CreatePurgeScheduleBadRequest{}
}

// WithXRequestID adds the xRequestId to the create purge schedule bad request response
func (o *CreatePurgeScheduleBadRequest) WithXRequestID(xRequestID string) *CreatePurgeScheduleBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create purge schedule bad request response
func (o *CreatePurgeScheduleBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create purge schedule bad request response
func (o *CreatePurgeScheduleBadRequest) WithPayload(payload *models.Errors) *CreatePurgeScheduleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create purge schedule bad request response
func (o *CreatePurgeScheduleBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatePurgeScheduleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreatePurgeScheduleUnauthorizedCode is the HTTP code returned for type CreatePurgeScheduleUnauthorized
const CreatePurgeScheduleUnauthorizedCode int = 401

/*CreatePurgeScheduleUnauthorized Unauthorized

swagger:response createPurgeScheduleUnauthorized
*/
type CreatePurgeScheduleUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreatePurgeScheduleUnauthorized creates CreatePurgeScheduleUnauthorized with default headers values
func NewCreatePurgeScheduleUnauthorized() *CreatePurgeScheduleUnauthorized {

	return &CreatePurgeScheduleUnauthorized{}
}

// WithXRequestID adds the xRequestId to the create purge schedule unauthorized response
func (o *CreatePurgeScheduleUnauthorized) WithXRequestID(xRequestID string) *CreatePurgeScheduleUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create purge schedule unauthorized response
func (o *CreatePurgeScheduleUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create purge schedule unauthorized response
func (o *CreatePurgeScheduleUnauthorized) WithPayload(payload *models.Errors) *CreatePurgeScheduleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create purge schedule unauthorized response
func (o *CreatePurgeScheduleUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatePurgeScheduleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreatePurgeScheduleForbiddenCode is the HTTP code returned for type CreatePurgeScheduleForbidden
const CreatePurgeScheduleForbiddenCode int = 403

/*CreatePurgeScheduleForbidden Forbidden

swagger:response createPurgeScheduleForbidden
*/
type CreatePurgeScheduleForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreatePurgeScheduleForbidden creates CreatePurgeScheduleForbidden with default headers values
func NewCreatePurgeScheduleForbidden() *CreatePurgeScheduleForbidden {

	return &CreatePurgeScheduleForbidden{}
}

// WithXRequestID adds the xRequestId to the create purge schedule forbidden response
func (o *CreatePurgeScheduleForbidden) WithXRequestID(xRequestID string) *CreatePurgeScheduleForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create purge schedule forbidden response
func (o *CreatePurgeScheduleForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create purge schedule forbidden response
func (o *CreatePurgeScheduleForbidden) WithPayload(payload *models.Errors) *CreatePurgeScheduleForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create purge schedule forbidden response
func (o *CreatePurgeScheduleForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatePurgeScheduleForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreatePurgeScheduleInternalServerErrorCode is the HTTP code returned for type CreatePurgeScheduleInternalServerError
const CreatePurgeScheduleInternalServerErrorCode int = 500

/*CreatePurgeScheduleInternalServerError Internal server error

swagger:response createPurgeScheduleInternalServerError
*/
type CreatePurgeScheduleInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewCreatePurgeScheduleInternalServerError creates CreatePurgeScheduleInternalServerError with default headers values
func NewCreatePurgeScheduleInternalServerError() *CreatePurgeScheduleInternalServerError {

	return &CreatePurgeScheduleInternalServerError{}
}

// WithXRequestID adds the xRequestId to the create purge schedule internal server error response
func (o *CreatePurgeScheduleInternalServerError) WithXRequestID(xRequestID string) *CreatePurgeScheduleInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create purge schedule internal server error response
func (o *CreatePurgeScheduleInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create purge schedule internal server error response
func (o *CreatePurgeScheduleInternalServerError) WithPayload(payload *models.Errors) *CreatePurgeScheduleInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create purge schedule internal server error response
func (o *CreatePurgeScheduleInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatePurgeScheduleInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
