// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdatePurgeScheduleHandlerFunc turns a function with the right signature into a update purge schedule handler
type UpdatePurgeScheduleHandlerFunc func(UpdatePurgeScheduleParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdatePurgeScheduleHandlerFunc) Handle(params UpdatePurgeScheduleParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdatePurgeScheduleHandler interface for that can handle valid update purge schedule params
type UpdatePurgeScheduleHandler interface {
	Handle(UpdatePurgeScheduleParams, interface{}) middleware.Responder
}

// NewUpdatePurgeSchedule creates a new http.Handler for the update purge schedule operation
func NewUpdatePurgeSchedule(ctx *middleware.Context, handler UpdatePurgeScheduleHandler) *UpdatePurgeSchedule {
	return &UpdatePurgeSchedule{Context: ctx, Handler: handler}
}

/*UpdatePurgeSchedule swagger:route PUT /system/purgeaudit/schedule purge updatePurgeSchedule

Update purge job's schedule.

This endpoint is for update purge job schedule.


*/
type UpdatePurgeSchedule struct {
	Context *middleware.Context
	Handler UpdatePurgeScheduleHandler
}

func (o *UpdatePurgeSchedule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdatePurgeScheduleParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
