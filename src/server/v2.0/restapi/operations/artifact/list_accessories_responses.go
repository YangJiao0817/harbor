// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListAccessoriesOKCode is the HTTP code returned for type ListAccessoriesOK
const ListAccessoriesOKCode int = 200

/*ListAccessoriesOK Success

swagger:response listAccessoriesOK
*/
type ListAccessoriesOK struct {
	/*Link refers to the previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of accessories

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.Accessory `json:"body,omitempty"`
}

// NewListAccessoriesOK creates ListAccessoriesOK with default headers values
func NewListAccessoriesOK() *ListAccessoriesOK {

	return &ListAccessoriesOK{}
}

// WithLink adds the link to the list accessories o k response
func (o *ListAccessoriesOK) WithLink(link string) *ListAccessoriesOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list accessories o k response
func (o *ListAccessoriesOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list accessories o k response
func (o *ListAccessoriesOK) WithXTotalCount(xTotalCount int64) *ListAccessoriesOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list accessories o k response
func (o *ListAccessoriesOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list accessories o k response
func (o *ListAccessoriesOK) WithPayload(payload []*models.Accessory) *ListAccessoriesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list accessories o k response
func (o *ListAccessoriesOK) SetPayload(payload []*models.Accessory) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAccessoriesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Accessory, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListAccessoriesBadRequestCode is the HTTP code returned for type ListAccessoriesBadRequest
const ListAccessoriesBadRequestCode int = 400

/*ListAccessoriesBadRequest Bad request

swagger:response listAccessoriesBadRequest
*/
type ListAccessoriesBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListAccessoriesBadRequest creates ListAccessoriesBadRequest with default headers values
func NewListAccessoriesBadRequest() *ListAccessoriesBadRequest {

	return &ListAccessoriesBadRequest{}
}

// WithXRequestID adds the xRequestId to the list accessories bad request response
func (o *ListAccessoriesBadRequest) WithXRequestID(xRequestID string) *ListAccessoriesBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list accessories bad request response
func (o *ListAccessoriesBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list accessories bad request response
func (o *ListAccessoriesBadRequest) WithPayload(payload *models.Errors) *ListAccessoriesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list accessories bad request response
func (o *ListAccessoriesBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAccessoriesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAccessoriesUnauthorizedCode is the HTTP code returned for type ListAccessoriesUnauthorized
const ListAccessoriesUnauthorizedCode int = 401

/*ListAccessoriesUnauthorized Unauthorized

swagger:response listAccessoriesUnauthorized
*/
type ListAccessoriesUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListAccessoriesUnauthorized creates ListAccessoriesUnauthorized with default headers values
func NewListAccessoriesUnauthorized() *ListAccessoriesUnauthorized {

	return &ListAccessoriesUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list accessories unauthorized response
func (o *ListAccessoriesUnauthorized) WithXRequestID(xRequestID string) *ListAccessoriesUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list accessories unauthorized response
func (o *ListAccessoriesUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list accessories unauthorized response
func (o *ListAccessoriesUnauthorized) WithPayload(payload *models.Errors) *ListAccessoriesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list accessories unauthorized response
func (o *ListAccessoriesUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAccessoriesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAccessoriesForbiddenCode is the HTTP code returned for type ListAccessoriesForbidden
const ListAccessoriesForbiddenCode int = 403

/*ListAccessoriesForbidden Forbidden

swagger:response listAccessoriesForbidden
*/
type ListAccessoriesForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListAccessoriesForbidden creates ListAccessoriesForbidden with default headers values
func NewListAccessoriesForbidden() *ListAccessoriesForbidden {

	return &ListAccessoriesForbidden{}
}

// WithXRequestID adds the xRequestId to the list accessories forbidden response
func (o *ListAccessoriesForbidden) WithXRequestID(xRequestID string) *ListAccessoriesForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list accessories forbidden response
func (o *ListAccessoriesForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list accessories forbidden response
func (o *ListAccessoriesForbidden) WithPayload(payload *models.Errors) *ListAccessoriesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list accessories forbidden response
func (o *ListAccessoriesForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAccessoriesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAccessoriesNotFoundCode is the HTTP code returned for type ListAccessoriesNotFound
const ListAccessoriesNotFoundCode int = 404

/*ListAccessoriesNotFound Not found

swagger:response listAccessoriesNotFound
*/
type ListAccessoriesNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListAccessoriesNotFound creates ListAccessoriesNotFound with default headers values
func NewListAccessoriesNotFound() *ListAccessoriesNotFound {

	return &ListAccessoriesNotFound{}
}

// WithXRequestID adds the xRequestId to the list accessories not found response
func (o *ListAccessoriesNotFound) WithXRequestID(xRequestID string) *ListAccessoriesNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list accessories not found response
func (o *ListAccessoriesNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list accessories not found response
func (o *ListAccessoriesNotFound) WithPayload(payload *models.Errors) *ListAccessoriesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list accessories not found response
func (o *ListAccessoriesNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAccessoriesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListAccessoriesInternalServerErrorCode is the HTTP code returned for type ListAccessoriesInternalServerError
const ListAccessoriesInternalServerErrorCode int = 500

/*ListAccessoriesInternalServerError Internal server error

swagger:response listAccessoriesInternalServerError
*/
type ListAccessoriesInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListAccessoriesInternalServerError creates ListAccessoriesInternalServerError with default headers values
func NewListAccessoriesInternalServerError() *ListAccessoriesInternalServerError {

	return &ListAccessoriesInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list accessories internal server error response
func (o *ListAccessoriesInternalServerError) WithXRequestID(xRequestID string) *ListAccessoriesInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list accessories internal server error response
func (o *ListAccessoriesInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list accessories internal server error response
func (o *ListAccessoriesInternalServerError) WithPayload(payload *models.Errors) *ListAccessoriesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list accessories internal server error response
func (o *ListAccessoriesInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListAccessoriesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
