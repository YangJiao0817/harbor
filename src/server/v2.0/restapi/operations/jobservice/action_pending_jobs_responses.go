// Code generated by go-swagger; DO NOT EDIT.

package jobservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ActionPendingJobsOKCode is the HTTP code returned for type ActionPendingJobsOK
const ActionPendingJobsOKCode int = 200

/*ActionPendingJobsOK take action to the jobs in the queue successfully.

swagger:response actionPendingJobsOK
*/
type ActionPendingJobsOK struct {
}

// NewActionPendingJobsOK creates ActionPendingJobsOK with default headers values
func NewActionPendingJobsOK() *ActionPendingJobsOK {

	return &ActionPendingJobsOK{}
}

// WriteResponse to the client
func (o *ActionPendingJobsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// ActionPendingJobsUnauthorizedCode is the HTTP code returned for type ActionPendingJobsUnauthorized
const ActionPendingJobsUnauthorizedCode int = 401

/*ActionPendingJobsUnauthorized Unauthorized

swagger:response actionPendingJobsUnauthorized
*/
type ActionPendingJobsUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewActionPendingJobsUnauthorized creates ActionPendingJobsUnauthorized with default headers values
func NewActionPendingJobsUnauthorized() *ActionPendingJobsUnauthorized {

	return &ActionPendingJobsUnauthorized{}
}

// WithXRequestID adds the xRequestId to the action pending jobs unauthorized response
func (o *ActionPendingJobsUnauthorized) WithXRequestID(xRequestID string) *ActionPendingJobsUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the action pending jobs unauthorized response
func (o *ActionPendingJobsUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the action pending jobs unauthorized response
func (o *ActionPendingJobsUnauthorized) WithPayload(payload *models.Errors) *ActionPendingJobsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the action pending jobs unauthorized response
func (o *ActionPendingJobsUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ActionPendingJobsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ActionPendingJobsForbiddenCode is the HTTP code returned for type ActionPendingJobsForbidden
const ActionPendingJobsForbiddenCode int = 403

/*ActionPendingJobsForbidden Forbidden

swagger:response actionPendingJobsForbidden
*/
type ActionPendingJobsForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewActionPendingJobsForbidden creates ActionPendingJobsForbidden with default headers values
func NewActionPendingJobsForbidden() *ActionPendingJobsForbidden {

	return &ActionPendingJobsForbidden{}
}

// WithXRequestID adds the xRequestId to the action pending jobs forbidden response
func (o *ActionPendingJobsForbidden) WithXRequestID(xRequestID string) *ActionPendingJobsForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the action pending jobs forbidden response
func (o *ActionPendingJobsForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the action pending jobs forbidden response
func (o *ActionPendingJobsForbidden) WithPayload(payload *models.Errors) *ActionPendingJobsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the action pending jobs forbidden response
func (o *ActionPendingJobsForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ActionPendingJobsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ActionPendingJobsNotFoundCode is the HTTP code returned for type ActionPendingJobsNotFound
const ActionPendingJobsNotFoundCode int = 404

/*ActionPendingJobsNotFound Not found

swagger:response actionPendingJobsNotFound
*/
type ActionPendingJobsNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewActionPendingJobsNotFound creates ActionPendingJobsNotFound with default headers values
func NewActionPendingJobsNotFound() *ActionPendingJobsNotFound {

	return &ActionPendingJobsNotFound{}
}

// WithXRequestID adds the xRequestId to the action pending jobs not found response
func (o *ActionPendingJobsNotFound) WithXRequestID(xRequestID string) *ActionPendingJobsNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the action pending jobs not found response
func (o *ActionPendingJobsNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the action pending jobs not found response
func (o *ActionPendingJobsNotFound) WithPayload(payload *models.Errors) *ActionPendingJobsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the action pending jobs not found response
func (o *ActionPendingJobsNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ActionPendingJobsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ActionPendingJobsInternalServerErrorCode is the HTTP code returned for type ActionPendingJobsInternalServerError
const ActionPendingJobsInternalServerErrorCode int = 500

/*ActionPendingJobsInternalServerError Internal server error

swagger:response actionPendingJobsInternalServerError
*/
type ActionPendingJobsInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewActionPendingJobsInternalServerError creates ActionPendingJobsInternalServerError with default headers values
func NewActionPendingJobsInternalServerError() *ActionPendingJobsInternalServerError {

	return &ActionPendingJobsInternalServerError{}
}

// WithXRequestID adds the xRequestId to the action pending jobs internal server error response
func (o *ActionPendingJobsInternalServerError) WithXRequestID(xRequestID string) *ActionPendingJobsInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the action pending jobs internal server error response
func (o *ActionPendingJobsInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the action pending jobs internal server error response
func (o *ActionPendingJobsInternalServerError) WithPayload(payload *models.Errors) *ActionPendingJobsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the action pending jobs internal server error response
func (o *ActionPendingJobsInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ActionPendingJobsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
