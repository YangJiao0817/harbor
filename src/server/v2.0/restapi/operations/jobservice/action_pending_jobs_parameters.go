// Code generated by go-swagger; DO NOT EDIT.

package jobservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// NewActionPendingJobsParams creates a new ActionPendingJobsParams object
// no default values defined in spec.
func NewActionPendingJobsParams() ActionPendingJobsParams {

	return ActionPendingJobsParams{}
}

// ActionPendingJobsParams contains all the bound params for the action pending jobs operation
// typically these are obtained from a http.Request
//
// swagger:parameters actionPendingJobs
type ActionPendingJobsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*An unique ID for the request
	  Min Length: 1
	  In: header
	*/
	XRequestID *string
	/*
	  Required: true
	  In: body
	*/
	ActionRequest *models.ActionRequest
	/*The type of the job. 'all' stands for all job types
	  Required: true
	  In: path
	*/
	JobType string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewActionPendingJobsParams() beforehand.
func (o *ActionPendingJobsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindXRequestID(r.Header[http.CanonicalHeaderKey("X-Request-Id")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.ActionRequest
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("actionRequest", "body", ""))
			} else {
				res = append(res, errors.NewParseError("actionRequest", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.ActionRequest = &body
			}
		}
	} else {
		res = append(res, errors.Required("actionRequest", "body", ""))
	}
	rJobType, rhkJobType, _ := route.Params.GetOK("job_type")
	if err := o.bindJobType(rJobType, rhkJobType, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXRequestID binds and validates parameter XRequestID from header.
func (o *ActionPendingJobsParams) bindXRequestID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.XRequestID = &raw

	if err := o.validateXRequestID(formats); err != nil {
		return err
	}

	return nil
}

// validateXRequestID carries on validations for parameter XRequestID
func (o *ActionPendingJobsParams) validateXRequestID(formats strfmt.Registry) error {

	if err := validate.MinLength("X-Request-Id", "header", (*o.XRequestID), 1); err != nil {
		return err
	}

	return nil
}

// bindJobType binds and validates parameter JobType from path.
func (o *ActionPendingJobsParams) bindJobType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.JobType = raw

	return nil
}
