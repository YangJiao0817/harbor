// Code generated by go-swagger; DO NOT EDIT.

package jobservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// StopRunningJobOKCode is the HTTP code returned for type StopRunningJobOK
const StopRunningJobOKCode int = 200

/*StopRunningJobOK Stop worker successfully.

swagger:response stopRunningJobOK
*/
type StopRunningJobOK struct {
}

// NewStopRunningJobOK creates StopRunningJobOK with default headers values
func NewStopRunningJobOK() *StopRunningJobOK {

	return &StopRunningJobOK{}
}

// WriteResponse to the client
func (o *StopRunningJobOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// StopRunningJobUnauthorizedCode is the HTTP code returned for type StopRunningJobUnauthorized
const StopRunningJobUnauthorizedCode int = 401

/*StopRunningJobUnauthorized Unauthorized

swagger:response stopRunningJobUnauthorized
*/
type StopRunningJobUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopRunningJobUnauthorized creates StopRunningJobUnauthorized with default headers values
func NewStopRunningJobUnauthorized() *StopRunningJobUnauthorized {

	return &StopRunningJobUnauthorized{}
}

// WithXRequestID adds the xRequestId to the stop running job unauthorized response
func (o *StopRunningJobUnauthorized) WithXRequestID(xRequestID string) *StopRunningJobUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop running job unauthorized response
func (o *StopRunningJobUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop running job unauthorized response
func (o *StopRunningJobUnauthorized) WithPayload(payload *models.Errors) *StopRunningJobUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop running job unauthorized response
func (o *StopRunningJobUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopRunningJobUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopRunningJobForbiddenCode is the HTTP code returned for type StopRunningJobForbidden
const StopRunningJobForbiddenCode int = 403

/*StopRunningJobForbidden Forbidden

swagger:response stopRunningJobForbidden
*/
type StopRunningJobForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopRunningJobForbidden creates StopRunningJobForbidden with default headers values
func NewStopRunningJobForbidden() *StopRunningJobForbidden {

	return &StopRunningJobForbidden{}
}

// WithXRequestID adds the xRequestId to the stop running job forbidden response
func (o *StopRunningJobForbidden) WithXRequestID(xRequestID string) *StopRunningJobForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop running job forbidden response
func (o *StopRunningJobForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop running job forbidden response
func (o *StopRunningJobForbidden) WithPayload(payload *models.Errors) *StopRunningJobForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop running job forbidden response
func (o *StopRunningJobForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopRunningJobForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopRunningJobNotFoundCode is the HTTP code returned for type StopRunningJobNotFound
const StopRunningJobNotFoundCode int = 404

/*StopRunningJobNotFound Not found

swagger:response stopRunningJobNotFound
*/
type StopRunningJobNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopRunningJobNotFound creates StopRunningJobNotFound with default headers values
func NewStopRunningJobNotFound() *StopRunningJobNotFound {

	return &StopRunningJobNotFound{}
}

// WithXRequestID adds the xRequestId to the stop running job not found response
func (o *StopRunningJobNotFound) WithXRequestID(xRequestID string) *StopRunningJobNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop running job not found response
func (o *StopRunningJobNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop running job not found response
func (o *StopRunningJobNotFound) WithPayload(payload *models.Errors) *StopRunningJobNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop running job not found response
func (o *StopRunningJobNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopRunningJobNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopRunningJobInternalServerErrorCode is the HTTP code returned for type StopRunningJobInternalServerError
const StopRunningJobInternalServerErrorCode int = 500

/*StopRunningJobInternalServerError Internal server error

swagger:response stopRunningJobInternalServerError
*/
type StopRunningJobInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopRunningJobInternalServerError creates StopRunningJobInternalServerError with default headers values
func NewStopRunningJobInternalServerError() *StopRunningJobInternalServerError {

	return &StopRunningJobInternalServerError{}
}

// WithXRequestID adds the xRequestId to the stop running job internal server error response
func (o *StopRunningJobInternalServerError) WithXRequestID(xRequestID string) *StopRunningJobInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop running job internal server error response
func (o *StopRunningJobInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop running job internal server error response
func (o *StopRunningJobInternalServerError) WithPayload(payload *models.Errors) *StopRunningJobInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop running job internal server error response
func (o *StopRunningJobInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopRunningJobInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
