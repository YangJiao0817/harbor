// Code generated by go-swagger; DO NOT EDIT.

package jobservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetWorkersOKCode is the HTTP code returned for type GetWorkersOK
const GetWorkersOKCode int = 200

/*GetWorkersOK Get workers successfully.

swagger:response getWorkersOK
*/
type GetWorkersOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Worker `json:"body,omitempty"`
}

// NewGetWorkersOK creates GetWorkersOK with default headers values
func NewGetWorkersOK() *GetWorkersOK {

	return &GetWorkersOK{}
}

// WithPayload adds the payload to the get workers o k response
func (o *GetWorkersOK) WithPayload(payload []*models.Worker) *GetWorkersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workers o k response
func (o *GetWorkersOK) SetPayload(payload []*models.Worker) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Worker, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetWorkersUnauthorizedCode is the HTTP code returned for type GetWorkersUnauthorized
const GetWorkersUnauthorizedCode int = 401

/*GetWorkersUnauthorized Unauthorized

swagger:response getWorkersUnauthorized
*/
type GetWorkersUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetWorkersUnauthorized creates GetWorkersUnauthorized with default headers values
func NewGetWorkersUnauthorized() *GetWorkersUnauthorized {

	return &GetWorkersUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get workers unauthorized response
func (o *GetWorkersUnauthorized) WithXRequestID(xRequestID string) *GetWorkersUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get workers unauthorized response
func (o *GetWorkersUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get workers unauthorized response
func (o *GetWorkersUnauthorized) WithPayload(payload *models.Errors) *GetWorkersUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workers unauthorized response
func (o *GetWorkersUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkersUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetWorkersForbiddenCode is the HTTP code returned for type GetWorkersForbidden
const GetWorkersForbiddenCode int = 403

/*GetWorkersForbidden Forbidden

swagger:response getWorkersForbidden
*/
type GetWorkersForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetWorkersForbidden creates GetWorkersForbidden with default headers values
func NewGetWorkersForbidden() *GetWorkersForbidden {

	return &GetWorkersForbidden{}
}

// WithXRequestID adds the xRequestId to the get workers forbidden response
func (o *GetWorkersForbidden) WithXRequestID(xRequestID string) *GetWorkersForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get workers forbidden response
func (o *GetWorkersForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get workers forbidden response
func (o *GetWorkersForbidden) WithPayload(payload *models.Errors) *GetWorkersForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workers forbidden response
func (o *GetWorkersForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkersForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetWorkersNotFoundCode is the HTTP code returned for type GetWorkersNotFound
const GetWorkersNotFoundCode int = 404

/*GetWorkersNotFound Not found

swagger:response getWorkersNotFound
*/
type GetWorkersNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetWorkersNotFound creates GetWorkersNotFound with default headers values
func NewGetWorkersNotFound() *GetWorkersNotFound {

	return &GetWorkersNotFound{}
}

// WithXRequestID adds the xRequestId to the get workers not found response
func (o *GetWorkersNotFound) WithXRequestID(xRequestID string) *GetWorkersNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get workers not found response
func (o *GetWorkersNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get workers not found response
func (o *GetWorkersNotFound) WithPayload(payload *models.Errors) *GetWorkersNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workers not found response
func (o *GetWorkersNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkersNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetWorkersInternalServerErrorCode is the HTTP code returned for type GetWorkersInternalServerError
const GetWorkersInternalServerErrorCode int = 500

/*GetWorkersInternalServerError Internal server error

swagger:response getWorkersInternalServerError
*/
type GetWorkersInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetWorkersInternalServerError creates GetWorkersInternalServerError with default headers values
func NewGetWorkersInternalServerError() *GetWorkersInternalServerError {

	return &GetWorkersInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get workers internal server error response
func (o *GetWorkersInternalServerError) WithXRequestID(xRequestID string) *GetWorkersInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get workers internal server error response
func (o *GetWorkersInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get workers internal server error response
func (o *GetWorkersInternalServerError) WithPayload(payload *models.Errors) *GetWorkersInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workers internal server error response
func (o *GetWorkersInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkersInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
