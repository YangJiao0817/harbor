// Code generated by go-swagger; DO NOT EDIT.

package scan_data_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetScanDataExportExecutionOKCode is the HTTP code returned for type GetScanDataExportExecutionOK
const GetScanDataExportExecutionOKCode int = 200

/*GetScanDataExportExecutionOK Success

swagger:response getScanDataExportExecutionOK
*/
type GetScanDataExportExecutionOK struct {

	/*
	  In: Body
	*/
	Payload *models.ScanDataExportExecution `json:"body,omitempty"`
}

// NewGetScanDataExportExecutionOK creates GetScanDataExportExecutionOK with default headers values
func NewGetScanDataExportExecutionOK() *GetScanDataExportExecutionOK {

	return &GetScanDataExportExecutionOK{}
}

// WithPayload adds the payload to the get scan data export execution o k response
func (o *GetScanDataExportExecutionOK) WithPayload(payload *models.ScanDataExportExecution) *GetScanDataExportExecutionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scan data export execution o k response
func (o *GetScanDataExportExecutionOK) SetPayload(payload *models.ScanDataExportExecution) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScanDataExportExecutionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetScanDataExportExecutionUnauthorizedCode is the HTTP code returned for type GetScanDataExportExecutionUnauthorized
const GetScanDataExportExecutionUnauthorizedCode int = 401

/*GetScanDataExportExecutionUnauthorized Unauthorized

swagger:response getScanDataExportExecutionUnauthorized
*/
type GetScanDataExportExecutionUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetScanDataExportExecutionUnauthorized creates GetScanDataExportExecutionUnauthorized with default headers values
func NewGetScanDataExportExecutionUnauthorized() *GetScanDataExportExecutionUnauthorized {

	return &GetScanDataExportExecutionUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get scan data export execution unauthorized response
func (o *GetScanDataExportExecutionUnauthorized) WithXRequestID(xRequestID string) *GetScanDataExportExecutionUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get scan data export execution unauthorized response
func (o *GetScanDataExportExecutionUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get scan data export execution unauthorized response
func (o *GetScanDataExportExecutionUnauthorized) WithPayload(payload *models.Errors) *GetScanDataExportExecutionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scan data export execution unauthorized response
func (o *GetScanDataExportExecutionUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScanDataExportExecutionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetScanDataExportExecutionForbiddenCode is the HTTP code returned for type GetScanDataExportExecutionForbidden
const GetScanDataExportExecutionForbiddenCode int = 403

/*GetScanDataExportExecutionForbidden Forbidden

swagger:response getScanDataExportExecutionForbidden
*/
type GetScanDataExportExecutionForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetScanDataExportExecutionForbidden creates GetScanDataExportExecutionForbidden with default headers values
func NewGetScanDataExportExecutionForbidden() *GetScanDataExportExecutionForbidden {

	return &GetScanDataExportExecutionForbidden{}
}

// WithXRequestID adds the xRequestId to the get scan data export execution forbidden response
func (o *GetScanDataExportExecutionForbidden) WithXRequestID(xRequestID string) *GetScanDataExportExecutionForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get scan data export execution forbidden response
func (o *GetScanDataExportExecutionForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get scan data export execution forbidden response
func (o *GetScanDataExportExecutionForbidden) WithPayload(payload *models.Errors) *GetScanDataExportExecutionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scan data export execution forbidden response
func (o *GetScanDataExportExecutionForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScanDataExportExecutionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetScanDataExportExecutionNotFoundCode is the HTTP code returned for type GetScanDataExportExecutionNotFound
const GetScanDataExportExecutionNotFoundCode int = 404

/*GetScanDataExportExecutionNotFound Not found

swagger:response getScanDataExportExecutionNotFound
*/
type GetScanDataExportExecutionNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetScanDataExportExecutionNotFound creates GetScanDataExportExecutionNotFound with default headers values
func NewGetScanDataExportExecutionNotFound() *GetScanDataExportExecutionNotFound {

	return &GetScanDataExportExecutionNotFound{}
}

// WithXRequestID adds the xRequestId to the get scan data export execution not found response
func (o *GetScanDataExportExecutionNotFound) WithXRequestID(xRequestID string) *GetScanDataExportExecutionNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get scan data export execution not found response
func (o *GetScanDataExportExecutionNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get scan data export execution not found response
func (o *GetScanDataExportExecutionNotFound) WithPayload(payload *models.Errors) *GetScanDataExportExecutionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scan data export execution not found response
func (o *GetScanDataExportExecutionNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScanDataExportExecutionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetScanDataExportExecutionInternalServerErrorCode is the HTTP code returned for type GetScanDataExportExecutionInternalServerError
const GetScanDataExportExecutionInternalServerErrorCode int = 500

/*GetScanDataExportExecutionInternalServerError Internal server error

swagger:response getScanDataExportExecutionInternalServerError
*/
type GetScanDataExportExecutionInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetScanDataExportExecutionInternalServerError creates GetScanDataExportExecutionInternalServerError with default headers values
func NewGetScanDataExportExecutionInternalServerError() *GetScanDataExportExecutionInternalServerError {

	return &GetScanDataExportExecutionInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get scan data export execution internal server error response
func (o *GetScanDataExportExecutionInternalServerError) WithXRequestID(xRequestID string) *GetScanDataExportExecutionInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get scan data export execution internal server error response
func (o *GetScanDataExportExecutionInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get scan data export execution internal server error response
func (o *GetScanDataExportExecutionInternalServerError) WithPayload(payload *models.Errors) *GetScanDataExportExecutionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scan data export execution internal server error response
func (o *GetScanDataExportExecutionInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScanDataExportExecutionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
