// Code generated by go-swagger; DO NOT EDIT.

package scan_data_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetScanDataExportExecutionListOKCode is the HTTP code returned for type GetScanDataExportExecutionListOK
const GetScanDataExportExecutionListOKCode int = 200

/*GetScanDataExportExecutionListOK Success

swagger:response getScanDataExportExecutionListOK
*/
type GetScanDataExportExecutionListOK struct {

	/*
	  In: Body
	*/
	Payload *models.ScanDataExportExecutionList `json:"body,omitempty"`
}

// NewGetScanDataExportExecutionListOK creates GetScanDataExportExecutionListOK with default headers values
func NewGetScanDataExportExecutionListOK() *GetScanDataExportExecutionListOK {

	return &GetScanDataExportExecutionListOK{}
}

// WithPayload adds the payload to the get scan data export execution list o k response
func (o *GetScanDataExportExecutionListOK) WithPayload(payload *models.ScanDataExportExecutionList) *GetScanDataExportExecutionListOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scan data export execution list o k response
func (o *GetScanDataExportExecutionListOK) SetPayload(payload *models.ScanDataExportExecutionList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScanDataExportExecutionListOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetScanDataExportExecutionListUnauthorizedCode is the HTTP code returned for type GetScanDataExportExecutionListUnauthorized
const GetScanDataExportExecutionListUnauthorizedCode int = 401

/*GetScanDataExportExecutionListUnauthorized Unauthorized

swagger:response getScanDataExportExecutionListUnauthorized
*/
type GetScanDataExportExecutionListUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetScanDataExportExecutionListUnauthorized creates GetScanDataExportExecutionListUnauthorized with default headers values
func NewGetScanDataExportExecutionListUnauthorized() *GetScanDataExportExecutionListUnauthorized {

	return &GetScanDataExportExecutionListUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get scan data export execution list unauthorized response
func (o *GetScanDataExportExecutionListUnauthorized) WithXRequestID(xRequestID string) *GetScanDataExportExecutionListUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get scan data export execution list unauthorized response
func (o *GetScanDataExportExecutionListUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get scan data export execution list unauthorized response
func (o *GetScanDataExportExecutionListUnauthorized) WithPayload(payload *models.Errors) *GetScanDataExportExecutionListUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scan data export execution list unauthorized response
func (o *GetScanDataExportExecutionListUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScanDataExportExecutionListUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetScanDataExportExecutionListForbiddenCode is the HTTP code returned for type GetScanDataExportExecutionListForbidden
const GetScanDataExportExecutionListForbiddenCode int = 403

/*GetScanDataExportExecutionListForbidden Forbidden

swagger:response getScanDataExportExecutionListForbidden
*/
type GetScanDataExportExecutionListForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetScanDataExportExecutionListForbidden creates GetScanDataExportExecutionListForbidden with default headers values
func NewGetScanDataExportExecutionListForbidden() *GetScanDataExportExecutionListForbidden {

	return &GetScanDataExportExecutionListForbidden{}
}

// WithXRequestID adds the xRequestId to the get scan data export execution list forbidden response
func (o *GetScanDataExportExecutionListForbidden) WithXRequestID(xRequestID string) *GetScanDataExportExecutionListForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get scan data export execution list forbidden response
func (o *GetScanDataExportExecutionListForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get scan data export execution list forbidden response
func (o *GetScanDataExportExecutionListForbidden) WithPayload(payload *models.Errors) *GetScanDataExportExecutionListForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scan data export execution list forbidden response
func (o *GetScanDataExportExecutionListForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScanDataExportExecutionListForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetScanDataExportExecutionListNotFoundCode is the HTTP code returned for type GetScanDataExportExecutionListNotFound
const GetScanDataExportExecutionListNotFoundCode int = 404

/*GetScanDataExportExecutionListNotFound Not found

swagger:response getScanDataExportExecutionListNotFound
*/
type GetScanDataExportExecutionListNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetScanDataExportExecutionListNotFound creates GetScanDataExportExecutionListNotFound with default headers values
func NewGetScanDataExportExecutionListNotFound() *GetScanDataExportExecutionListNotFound {

	return &GetScanDataExportExecutionListNotFound{}
}

// WithXRequestID adds the xRequestId to the get scan data export execution list not found response
func (o *GetScanDataExportExecutionListNotFound) WithXRequestID(xRequestID string) *GetScanDataExportExecutionListNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get scan data export execution list not found response
func (o *GetScanDataExportExecutionListNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get scan data export execution list not found response
func (o *GetScanDataExportExecutionListNotFound) WithPayload(payload *models.Errors) *GetScanDataExportExecutionListNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scan data export execution list not found response
func (o *GetScanDataExportExecutionListNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScanDataExportExecutionListNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetScanDataExportExecutionListInternalServerErrorCode is the HTTP code returned for type GetScanDataExportExecutionListInternalServerError
const GetScanDataExportExecutionListInternalServerErrorCode int = 500

/*GetScanDataExportExecutionListInternalServerError Internal server error

swagger:response getScanDataExportExecutionListInternalServerError
*/
type GetScanDataExportExecutionListInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetScanDataExportExecutionListInternalServerError creates GetScanDataExportExecutionListInternalServerError with default headers values
func NewGetScanDataExportExecutionListInternalServerError() *GetScanDataExportExecutionListInternalServerError {

	return &GetScanDataExportExecutionListInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get scan data export execution list internal server error response
func (o *GetScanDataExportExecutionListInternalServerError) WithXRequestID(xRequestID string) *GetScanDataExportExecutionListInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get scan data export execution list internal server error response
func (o *GetScanDataExportExecutionListInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get scan data export execution list internal server error response
func (o *GetScanDataExportExecutionListInternalServerError) WithPayload(payload *models.Errors) *GetScanDataExportExecutionListInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get scan data export execution list internal server error response
func (o *GetScanDataExportExecutionListInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetScanDataExportExecutionListInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
