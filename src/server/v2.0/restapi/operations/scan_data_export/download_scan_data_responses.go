// Code generated by go-swagger; DO NOT EDIT.

package scan_data_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// DownloadScanDataOKCode is the HTTP code returned for type DownloadScanDataOK
const DownloadScanDataOKCode int = 200

/*DownloadScanDataOK Data file containing the export data

swagger:response downloadScanDataOK
*/
type DownloadScanDataOK struct {
	/*Value is a CSV formatted file; filename=export.csv

	 */
	ContentDisposition string `json:"Content-Disposition"`

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewDownloadScanDataOK creates DownloadScanDataOK with default headers values
func NewDownloadScanDataOK() *DownloadScanDataOK {

	return &DownloadScanDataOK{}
}

// WithContentDisposition adds the contentDisposition to the download scan data o k response
func (o *DownloadScanDataOK) WithContentDisposition(contentDisposition string) *DownloadScanDataOK {
	o.ContentDisposition = contentDisposition
	return o
}

// SetContentDisposition sets the contentDisposition to the download scan data o k response
func (o *DownloadScanDataOK) SetContentDisposition(contentDisposition string) {
	o.ContentDisposition = contentDisposition
}

// WithPayload adds the payload to the download scan data o k response
func (o *DownloadScanDataOK) WithPayload(payload io.ReadCloser) *DownloadScanDataOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download scan data o k response
func (o *DownloadScanDataOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadScanDataOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Disposition

	contentDisposition := o.ContentDisposition
	if contentDisposition != "" {
		rw.Header().Set("Content-Disposition", contentDisposition)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DownloadScanDataUnauthorizedCode is the HTTP code returned for type DownloadScanDataUnauthorized
const DownloadScanDataUnauthorizedCode int = 401

/*DownloadScanDataUnauthorized Unauthorized

swagger:response downloadScanDataUnauthorized
*/
type DownloadScanDataUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDownloadScanDataUnauthorized creates DownloadScanDataUnauthorized with default headers values
func NewDownloadScanDataUnauthorized() *DownloadScanDataUnauthorized {

	return &DownloadScanDataUnauthorized{}
}

// WithXRequestID adds the xRequestId to the download scan data unauthorized response
func (o *DownloadScanDataUnauthorized) WithXRequestID(xRequestID string) *DownloadScanDataUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the download scan data unauthorized response
func (o *DownloadScanDataUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the download scan data unauthorized response
func (o *DownloadScanDataUnauthorized) WithPayload(payload *models.Errors) *DownloadScanDataUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download scan data unauthorized response
func (o *DownloadScanDataUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadScanDataUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DownloadScanDataForbiddenCode is the HTTP code returned for type DownloadScanDataForbidden
const DownloadScanDataForbiddenCode int = 403

/*DownloadScanDataForbidden Forbidden

swagger:response downloadScanDataForbidden
*/
type DownloadScanDataForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDownloadScanDataForbidden creates DownloadScanDataForbidden with default headers values
func NewDownloadScanDataForbidden() *DownloadScanDataForbidden {

	return &DownloadScanDataForbidden{}
}

// WithXRequestID adds the xRequestId to the download scan data forbidden response
func (o *DownloadScanDataForbidden) WithXRequestID(xRequestID string) *DownloadScanDataForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the download scan data forbidden response
func (o *DownloadScanDataForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the download scan data forbidden response
func (o *DownloadScanDataForbidden) WithPayload(payload *models.Errors) *DownloadScanDataForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download scan data forbidden response
func (o *DownloadScanDataForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadScanDataForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DownloadScanDataNotFoundCode is the HTTP code returned for type DownloadScanDataNotFound
const DownloadScanDataNotFoundCode int = 404

/*DownloadScanDataNotFound Not found

swagger:response downloadScanDataNotFound
*/
type DownloadScanDataNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDownloadScanDataNotFound creates DownloadScanDataNotFound with default headers values
func NewDownloadScanDataNotFound() *DownloadScanDataNotFound {

	return &DownloadScanDataNotFound{}
}

// WithXRequestID adds the xRequestId to the download scan data not found response
func (o *DownloadScanDataNotFound) WithXRequestID(xRequestID string) *DownloadScanDataNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the download scan data not found response
func (o *DownloadScanDataNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the download scan data not found response
func (o *DownloadScanDataNotFound) WithPayload(payload *models.Errors) *DownloadScanDataNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download scan data not found response
func (o *DownloadScanDataNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadScanDataNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DownloadScanDataInternalServerErrorCode is the HTTP code returned for type DownloadScanDataInternalServerError
const DownloadScanDataInternalServerErrorCode int = 500

/*DownloadScanDataInternalServerError Internal server error

swagger:response downloadScanDataInternalServerError
*/
type DownloadScanDataInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewDownloadScanDataInternalServerError creates DownloadScanDataInternalServerError with default headers values
func NewDownloadScanDataInternalServerError() *DownloadScanDataInternalServerError {

	return &DownloadScanDataInternalServerError{}
}

// WithXRequestID adds the xRequestId to the download scan data internal server error response
func (o *DownloadScanDataInternalServerError) WithXRequestID(xRequestID string) *DownloadScanDataInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the download scan data internal server error response
func (o *DownloadScanDataInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the download scan data internal server error response
func (o *DownloadScanDataInternalServerError) WithPayload(payload *models.Errors) *DownloadScanDataInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download scan data internal server error response
func (o *DownloadScanDataInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadScanDataInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
