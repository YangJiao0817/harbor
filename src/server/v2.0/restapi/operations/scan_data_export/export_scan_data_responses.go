// Code generated by go-swagger; DO NOT EDIT.

package scan_data_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ExportScanDataOKCode is the HTTP code returned for type ExportScanDataOK
const ExportScanDataOKCode int = 200

/*ExportScanDataOK Success.

swagger:response exportScanDataOK
*/
type ExportScanDataOK struct {

	/*
	  In: Body
	*/
	Payload *models.ScanDataExportJob `json:"body,omitempty"`
}

// NewExportScanDataOK creates ExportScanDataOK with default headers values
func NewExportScanDataOK() *ExportScanDataOK {

	return &ExportScanDataOK{}
}

// WithPayload adds the payload to the export scan data o k response
func (o *ExportScanDataOK) WithPayload(payload *models.ScanDataExportJob) *ExportScanDataOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the export scan data o k response
func (o *ExportScanDataOK) SetPayload(payload *models.ScanDataExportJob) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExportScanDataOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExportScanDataBadRequestCode is the HTTP code returned for type ExportScanDataBadRequest
const ExportScanDataBadRequestCode int = 400

/*ExportScanDataBadRequest Bad request

swagger:response exportScanDataBadRequest
*/
type ExportScanDataBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewExportScanDataBadRequest creates ExportScanDataBadRequest with default headers values
func NewExportScanDataBadRequest() *ExportScanDataBadRequest {

	return &ExportScanDataBadRequest{}
}

// WithXRequestID adds the xRequestId to the export scan data bad request response
func (o *ExportScanDataBadRequest) WithXRequestID(xRequestID string) *ExportScanDataBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the export scan data bad request response
func (o *ExportScanDataBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the export scan data bad request response
func (o *ExportScanDataBadRequest) WithPayload(payload *models.Errors) *ExportScanDataBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the export scan data bad request response
func (o *ExportScanDataBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExportScanDataBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExportScanDataUnauthorizedCode is the HTTP code returned for type ExportScanDataUnauthorized
const ExportScanDataUnauthorizedCode int = 401

/*ExportScanDataUnauthorized Unauthorized

swagger:response exportScanDataUnauthorized
*/
type ExportScanDataUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewExportScanDataUnauthorized creates ExportScanDataUnauthorized with default headers values
func NewExportScanDataUnauthorized() *ExportScanDataUnauthorized {

	return &ExportScanDataUnauthorized{}
}

// WithXRequestID adds the xRequestId to the export scan data unauthorized response
func (o *ExportScanDataUnauthorized) WithXRequestID(xRequestID string) *ExportScanDataUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the export scan data unauthorized response
func (o *ExportScanDataUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the export scan data unauthorized response
func (o *ExportScanDataUnauthorized) WithPayload(payload *models.Errors) *ExportScanDataUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the export scan data unauthorized response
func (o *ExportScanDataUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExportScanDataUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExportScanDataForbiddenCode is the HTTP code returned for type ExportScanDataForbidden
const ExportScanDataForbiddenCode int = 403

/*ExportScanDataForbidden Forbidden

swagger:response exportScanDataForbidden
*/
type ExportScanDataForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewExportScanDataForbidden creates ExportScanDataForbidden with default headers values
func NewExportScanDataForbidden() *ExportScanDataForbidden {

	return &ExportScanDataForbidden{}
}

// WithXRequestID adds the xRequestId to the export scan data forbidden response
func (o *ExportScanDataForbidden) WithXRequestID(xRequestID string) *ExportScanDataForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the export scan data forbidden response
func (o *ExportScanDataForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the export scan data forbidden response
func (o *ExportScanDataForbidden) WithPayload(payload *models.Errors) *ExportScanDataForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the export scan data forbidden response
func (o *ExportScanDataForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExportScanDataForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExportScanDataNotFoundCode is the HTTP code returned for type ExportScanDataNotFound
const ExportScanDataNotFoundCode int = 404

/*ExportScanDataNotFound Not found

swagger:response exportScanDataNotFound
*/
type ExportScanDataNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewExportScanDataNotFound creates ExportScanDataNotFound with default headers values
func NewExportScanDataNotFound() *ExportScanDataNotFound {

	return &ExportScanDataNotFound{}
}

// WithXRequestID adds the xRequestId to the export scan data not found response
func (o *ExportScanDataNotFound) WithXRequestID(xRequestID string) *ExportScanDataNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the export scan data not found response
func (o *ExportScanDataNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the export scan data not found response
func (o *ExportScanDataNotFound) WithPayload(payload *models.Errors) *ExportScanDataNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the export scan data not found response
func (o *ExportScanDataNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExportScanDataNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExportScanDataMethodNotAllowedCode is the HTTP code returned for type ExportScanDataMethodNotAllowed
const ExportScanDataMethodNotAllowedCode int = 405

/*ExportScanDataMethodNotAllowed Method not allowed

swagger:response exportScanDataMethodNotAllowed
*/
type ExportScanDataMethodNotAllowed struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewExportScanDataMethodNotAllowed creates ExportScanDataMethodNotAllowed with default headers values
func NewExportScanDataMethodNotAllowed() *ExportScanDataMethodNotAllowed {

	return &ExportScanDataMethodNotAllowed{}
}

// WithXRequestID adds the xRequestId to the export scan data method not allowed response
func (o *ExportScanDataMethodNotAllowed) WithXRequestID(xRequestID string) *ExportScanDataMethodNotAllowed {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the export scan data method not allowed response
func (o *ExportScanDataMethodNotAllowed) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the export scan data method not allowed response
func (o *ExportScanDataMethodNotAllowed) WithPayload(payload *models.Errors) *ExportScanDataMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the export scan data method not allowed response
func (o *ExportScanDataMethodNotAllowed) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExportScanDataMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExportScanDataConflictCode is the HTTP code returned for type ExportScanDataConflict
const ExportScanDataConflictCode int = 409

/*ExportScanDataConflict Conflict

swagger:response exportScanDataConflict
*/
type ExportScanDataConflict struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewExportScanDataConflict creates ExportScanDataConflict with default headers values
func NewExportScanDataConflict() *ExportScanDataConflict {

	return &ExportScanDataConflict{}
}

// WithXRequestID adds the xRequestId to the export scan data conflict response
func (o *ExportScanDataConflict) WithXRequestID(xRequestID string) *ExportScanDataConflict {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the export scan data conflict response
func (o *ExportScanDataConflict) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the export scan data conflict response
func (o *ExportScanDataConflict) WithPayload(payload *models.Errors) *ExportScanDataConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the export scan data conflict response
func (o *ExportScanDataConflict) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExportScanDataConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExportScanDataInternalServerErrorCode is the HTTP code returned for type ExportScanDataInternalServerError
const ExportScanDataInternalServerErrorCode int = 500

/*ExportScanDataInternalServerError Internal server error

swagger:response exportScanDataInternalServerError
*/
type ExportScanDataInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewExportScanDataInternalServerError creates ExportScanDataInternalServerError with default headers values
func NewExportScanDataInternalServerError() *ExportScanDataInternalServerError {

	return &ExportScanDataInternalServerError{}
}

// WithXRequestID adds the xRequestId to the export scan data internal server error response
func (o *ExportScanDataInternalServerError) WithXRequestID(xRequestID string) *ExportScanDataInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the export scan data internal server error response
func (o *ExportScanDataInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the export scan data internal server error response
func (o *ExportScanDataInternalServerError) WithPayload(payload *models.Errors) *ExportScanDataInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the export scan data internal server error response
func (o *ExportScanDataInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExportScanDataInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
