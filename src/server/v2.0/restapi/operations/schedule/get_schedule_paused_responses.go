// Code generated by go-swagger; DO NOT EDIT.

package schedule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// GetSchedulePausedOKCode is the HTTP code returned for type GetSchedulePausedOK
const GetSchedulePausedOKCode int = 200

/*GetSchedulePausedOK Get scheduler status successfully.

swagger:response getSchedulePausedOK
*/
type GetSchedulePausedOK struct {

	/*
	  In: Body
	*/
	Payload *models.SchedulerStatus `json:"body,omitempty"`
}

// NewGetSchedulePausedOK creates GetSchedulePausedOK with default headers values
func NewGetSchedulePausedOK() *GetSchedulePausedOK {

	return &GetSchedulePausedOK{}
}

// WithPayload adds the payload to the get schedule paused o k response
func (o *GetSchedulePausedOK) WithPayload(payload *models.SchedulerStatus) *GetSchedulePausedOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get schedule paused o k response
func (o *GetSchedulePausedOK) SetPayload(payload *models.SchedulerStatus) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSchedulePausedOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSchedulePausedUnauthorizedCode is the HTTP code returned for type GetSchedulePausedUnauthorized
const GetSchedulePausedUnauthorizedCode int = 401

/*GetSchedulePausedUnauthorized Unauthorized

swagger:response getSchedulePausedUnauthorized
*/
type GetSchedulePausedUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetSchedulePausedUnauthorized creates GetSchedulePausedUnauthorized with default headers values
func NewGetSchedulePausedUnauthorized() *GetSchedulePausedUnauthorized {

	return &GetSchedulePausedUnauthorized{}
}

// WithXRequestID adds the xRequestId to the get schedule paused unauthorized response
func (o *GetSchedulePausedUnauthorized) WithXRequestID(xRequestID string) *GetSchedulePausedUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get schedule paused unauthorized response
func (o *GetSchedulePausedUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get schedule paused unauthorized response
func (o *GetSchedulePausedUnauthorized) WithPayload(payload *models.Errors) *GetSchedulePausedUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get schedule paused unauthorized response
func (o *GetSchedulePausedUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSchedulePausedUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSchedulePausedForbiddenCode is the HTTP code returned for type GetSchedulePausedForbidden
const GetSchedulePausedForbiddenCode int = 403

/*GetSchedulePausedForbidden Forbidden

swagger:response getSchedulePausedForbidden
*/
type GetSchedulePausedForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetSchedulePausedForbidden creates GetSchedulePausedForbidden with default headers values
func NewGetSchedulePausedForbidden() *GetSchedulePausedForbidden {

	return &GetSchedulePausedForbidden{}
}

// WithXRequestID adds the xRequestId to the get schedule paused forbidden response
func (o *GetSchedulePausedForbidden) WithXRequestID(xRequestID string) *GetSchedulePausedForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get schedule paused forbidden response
func (o *GetSchedulePausedForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get schedule paused forbidden response
func (o *GetSchedulePausedForbidden) WithPayload(payload *models.Errors) *GetSchedulePausedForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get schedule paused forbidden response
func (o *GetSchedulePausedForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSchedulePausedForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSchedulePausedNotFoundCode is the HTTP code returned for type GetSchedulePausedNotFound
const GetSchedulePausedNotFoundCode int = 404

/*GetSchedulePausedNotFound Not found

swagger:response getSchedulePausedNotFound
*/
type GetSchedulePausedNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetSchedulePausedNotFound creates GetSchedulePausedNotFound with default headers values
func NewGetSchedulePausedNotFound() *GetSchedulePausedNotFound {

	return &GetSchedulePausedNotFound{}
}

// WithXRequestID adds the xRequestId to the get schedule paused not found response
func (o *GetSchedulePausedNotFound) WithXRequestID(xRequestID string) *GetSchedulePausedNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get schedule paused not found response
func (o *GetSchedulePausedNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get schedule paused not found response
func (o *GetSchedulePausedNotFound) WithPayload(payload *models.Errors) *GetSchedulePausedNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get schedule paused not found response
func (o *GetSchedulePausedNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSchedulePausedNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSchedulePausedInternalServerErrorCode is the HTTP code returned for type GetSchedulePausedInternalServerError
const GetSchedulePausedInternalServerErrorCode int = 500

/*GetSchedulePausedInternalServerError Internal server error

swagger:response getSchedulePausedInternalServerError
*/
type GetSchedulePausedInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewGetSchedulePausedInternalServerError creates GetSchedulePausedInternalServerError with default headers values
func NewGetSchedulePausedInternalServerError() *GetSchedulePausedInternalServerError {

	return &GetSchedulePausedInternalServerError{}
}

// WithXRequestID adds the xRequestId to the get schedule paused internal server error response
func (o *GetSchedulePausedInternalServerError) WithXRequestID(xRequestID string) *GetSchedulePausedInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get schedule paused internal server error response
func (o *GetSchedulePausedInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get schedule paused internal server error response
func (o *GetSchedulePausedInternalServerError) WithPayload(payload *models.Errors) *GetSchedulePausedInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get schedule paused internal server error response
func (o *GetSchedulePausedInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSchedulePausedInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
