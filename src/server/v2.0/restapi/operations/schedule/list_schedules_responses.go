// Code generated by go-swagger; DO NOT EDIT.

package schedule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// ListSchedulesOKCode is the HTTP code returned for type ListSchedulesOK
const ListSchedulesOKCode int = 200

/*ListSchedulesOK list schedule successfully.

swagger:response listSchedulesOK
*/
type ListSchedulesOK struct {
	/*Link to previous page and next page

	 */
	Link string `json:"Link"`
	/*The total count of available items

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.ScheduleTask `json:"body,omitempty"`
}

// NewListSchedulesOK creates ListSchedulesOK with default headers values
func NewListSchedulesOK() *ListSchedulesOK {

	return &ListSchedulesOK{}
}

// WithLink adds the link to the list schedules o k response
func (o *ListSchedulesOK) WithLink(link string) *ListSchedulesOK {
	o.Link = link
	return o
}

// SetLink sets the link to the list schedules o k response
func (o *ListSchedulesOK) SetLink(link string) {
	o.Link = link
}

// WithXTotalCount adds the xTotalCount to the list schedules o k response
func (o *ListSchedulesOK) WithXTotalCount(xTotalCount int64) *ListSchedulesOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the list schedules o k response
func (o *ListSchedulesOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the list schedules o k response
func (o *ListSchedulesOK) WithPayload(payload []*models.ScheduleTask) *ListSchedulesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list schedules o k response
func (o *ListSchedulesOK) SetPayload(payload []*models.ScheduleTask) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListSchedulesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Link

	link := o.Link
	if link != "" {
		rw.Header().Set("Link", link)
	}

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ScheduleTask, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListSchedulesUnauthorizedCode is the HTTP code returned for type ListSchedulesUnauthorized
const ListSchedulesUnauthorizedCode int = 401

/*ListSchedulesUnauthorized Unauthorized

swagger:response listSchedulesUnauthorized
*/
type ListSchedulesUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListSchedulesUnauthorized creates ListSchedulesUnauthorized with default headers values
func NewListSchedulesUnauthorized() *ListSchedulesUnauthorized {

	return &ListSchedulesUnauthorized{}
}

// WithXRequestID adds the xRequestId to the list schedules unauthorized response
func (o *ListSchedulesUnauthorized) WithXRequestID(xRequestID string) *ListSchedulesUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list schedules unauthorized response
func (o *ListSchedulesUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list schedules unauthorized response
func (o *ListSchedulesUnauthorized) WithPayload(payload *models.Errors) *ListSchedulesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list schedules unauthorized response
func (o *ListSchedulesUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListSchedulesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListSchedulesForbiddenCode is the HTTP code returned for type ListSchedulesForbidden
const ListSchedulesForbiddenCode int = 403

/*ListSchedulesForbidden Forbidden

swagger:response listSchedulesForbidden
*/
type ListSchedulesForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListSchedulesForbidden creates ListSchedulesForbidden with default headers values
func NewListSchedulesForbidden() *ListSchedulesForbidden {

	return &ListSchedulesForbidden{}
}

// WithXRequestID adds the xRequestId to the list schedules forbidden response
func (o *ListSchedulesForbidden) WithXRequestID(xRequestID string) *ListSchedulesForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list schedules forbidden response
func (o *ListSchedulesForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list schedules forbidden response
func (o *ListSchedulesForbidden) WithPayload(payload *models.Errors) *ListSchedulesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list schedules forbidden response
func (o *ListSchedulesForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListSchedulesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListSchedulesNotFoundCode is the HTTP code returned for type ListSchedulesNotFound
const ListSchedulesNotFoundCode int = 404

/*ListSchedulesNotFound Not found

swagger:response listSchedulesNotFound
*/
type ListSchedulesNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListSchedulesNotFound creates ListSchedulesNotFound with default headers values
func NewListSchedulesNotFound() *ListSchedulesNotFound {

	return &ListSchedulesNotFound{}
}

// WithXRequestID adds the xRequestId to the list schedules not found response
func (o *ListSchedulesNotFound) WithXRequestID(xRequestID string) *ListSchedulesNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list schedules not found response
func (o *ListSchedulesNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list schedules not found response
func (o *ListSchedulesNotFound) WithPayload(payload *models.Errors) *ListSchedulesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list schedules not found response
func (o *ListSchedulesNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListSchedulesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ListSchedulesInternalServerErrorCode is the HTTP code returned for type ListSchedulesInternalServerError
const ListSchedulesInternalServerErrorCode int = 500

/*ListSchedulesInternalServerError Internal server error

swagger:response listSchedulesInternalServerError
*/
type ListSchedulesInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewListSchedulesInternalServerError creates ListSchedulesInternalServerError with default headers values
func NewListSchedulesInternalServerError() *ListSchedulesInternalServerError {

	return &ListSchedulesInternalServerError{}
}

// WithXRequestID adds the xRequestId to the list schedules internal server error response
func (o *ListSchedulesInternalServerError) WithXRequestID(xRequestID string) *ListSchedulesInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the list schedules internal server error response
func (o *ListSchedulesInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the list schedules internal server error response
func (o *ListSchedulesInternalServerError) WithPayload(payload *models.Errors) *ListSchedulesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list schedules internal server error response
func (o *ListSchedulesInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListSchedulesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
