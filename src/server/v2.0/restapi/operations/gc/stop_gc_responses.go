// Code generated by go-swagger; DO NOT EDIT.

package gc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// StopGCOKCode is the HTTP code returned for type StopGCOK
const StopGCOKCode int = 200

/*StopGCOK Success

swagger:response stopGcOK
*/
type StopGCOK struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewStopGCOK creates StopGCOK with default headers values
func NewStopGCOK() *StopGCOK {

	return &StopGCOK{}
}

// WithXRequestID adds the xRequestId to the stop Gc o k response
func (o *StopGCOK) WithXRequestID(xRequestID string) *StopGCOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop Gc o k response
func (o *StopGCOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *StopGCOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// StopGCUnauthorizedCode is the HTTP code returned for type StopGCUnauthorized
const StopGCUnauthorizedCode int = 401

/*StopGCUnauthorized Unauthorized

swagger:response stopGcUnauthorized
*/
type StopGCUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopGCUnauthorized creates StopGCUnauthorized with default headers values
func NewStopGCUnauthorized() *StopGCUnauthorized {

	return &StopGCUnauthorized{}
}

// WithXRequestID adds the xRequestId to the stop Gc unauthorized response
func (o *StopGCUnauthorized) WithXRequestID(xRequestID string) *StopGCUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop Gc unauthorized response
func (o *StopGCUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop Gc unauthorized response
func (o *StopGCUnauthorized) WithPayload(payload *models.Errors) *StopGCUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop Gc unauthorized response
func (o *StopGCUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopGCUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopGCForbiddenCode is the HTTP code returned for type StopGCForbidden
const StopGCForbiddenCode int = 403

/*StopGCForbidden Forbidden

swagger:response stopGcForbidden
*/
type StopGCForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopGCForbidden creates StopGCForbidden with default headers values
func NewStopGCForbidden() *StopGCForbidden {

	return &StopGCForbidden{}
}

// WithXRequestID adds the xRequestId to the stop Gc forbidden response
func (o *StopGCForbidden) WithXRequestID(xRequestID string) *StopGCForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop Gc forbidden response
func (o *StopGCForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop Gc forbidden response
func (o *StopGCForbidden) WithPayload(payload *models.Errors) *StopGCForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop Gc forbidden response
func (o *StopGCForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopGCForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopGCNotFoundCode is the HTTP code returned for type StopGCNotFound
const StopGCNotFoundCode int = 404

/*StopGCNotFound Not found

swagger:response stopGcNotFound
*/
type StopGCNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopGCNotFound creates StopGCNotFound with default headers values
func NewStopGCNotFound() *StopGCNotFound {

	return &StopGCNotFound{}
}

// WithXRequestID adds the xRequestId to the stop Gc not found response
func (o *StopGCNotFound) WithXRequestID(xRequestID string) *StopGCNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop Gc not found response
func (o *StopGCNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop Gc not found response
func (o *StopGCNotFound) WithPayload(payload *models.Errors) *StopGCNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop Gc not found response
func (o *StopGCNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopGCNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopGCInternalServerErrorCode is the HTTP code returned for type StopGCInternalServerError
const StopGCInternalServerErrorCode int = 500

/*StopGCInternalServerError Internal server error

swagger:response stopGcInternalServerError
*/
type StopGCInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopGCInternalServerError creates StopGCInternalServerError with default headers values
func NewStopGCInternalServerError() *StopGCInternalServerError {

	return &StopGCInternalServerError{}
}

// WithXRequestID adds the xRequestId to the stop Gc internal server error response
func (o *StopGCInternalServerError) WithXRequestID(xRequestID string) *StopGCInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop Gc internal server error response
func (o *StopGCInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop Gc internal server error response
func (o *StopGCInternalServerError) WithPayload(payload *models.Errors) *StopGCInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop Gc internal server error response
func (o *StopGCInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopGCInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
