// Code generated by go-swagger; DO NOT EDIT.

package scan_all

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// StopScanAllAcceptedCode is the HTTP code returned for type StopScanAllAccepted
const StopScanAllAcceptedCode int = 202

/*StopScanAllAccepted Accepted

swagger:response stopScanAllAccepted
*/
type StopScanAllAccepted struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewStopScanAllAccepted creates StopScanAllAccepted with default headers values
func NewStopScanAllAccepted() *StopScanAllAccepted {

	return &StopScanAllAccepted{}
}

// WithXRequestID adds the xRequestId to the stop scan all accepted response
func (o *StopScanAllAccepted) WithXRequestID(xRequestID string) *StopScanAllAccepted {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop scan all accepted response
func (o *StopScanAllAccepted) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *StopScanAllAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(202)
}

// StopScanAllBadRequestCode is the HTTP code returned for type StopScanAllBadRequest
const StopScanAllBadRequestCode int = 400

/*StopScanAllBadRequest Bad request

swagger:response stopScanAllBadRequest
*/
type StopScanAllBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopScanAllBadRequest creates StopScanAllBadRequest with default headers values
func NewStopScanAllBadRequest() *StopScanAllBadRequest {

	return &StopScanAllBadRequest{}
}

// WithXRequestID adds the xRequestId to the stop scan all bad request response
func (o *StopScanAllBadRequest) WithXRequestID(xRequestID string) *StopScanAllBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop scan all bad request response
func (o *StopScanAllBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop scan all bad request response
func (o *StopScanAllBadRequest) WithPayload(payload *models.Errors) *StopScanAllBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop scan all bad request response
func (o *StopScanAllBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopScanAllBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopScanAllUnauthorizedCode is the HTTP code returned for type StopScanAllUnauthorized
const StopScanAllUnauthorizedCode int = 401

/*StopScanAllUnauthorized Unauthorized

swagger:response stopScanAllUnauthorized
*/
type StopScanAllUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopScanAllUnauthorized creates StopScanAllUnauthorized with default headers values
func NewStopScanAllUnauthorized() *StopScanAllUnauthorized {

	return &StopScanAllUnauthorized{}
}

// WithXRequestID adds the xRequestId to the stop scan all unauthorized response
func (o *StopScanAllUnauthorized) WithXRequestID(xRequestID string) *StopScanAllUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop scan all unauthorized response
func (o *StopScanAllUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop scan all unauthorized response
func (o *StopScanAllUnauthorized) WithPayload(payload *models.Errors) *StopScanAllUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop scan all unauthorized response
func (o *StopScanAllUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopScanAllUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopScanAllForbiddenCode is the HTTP code returned for type StopScanAllForbidden
const StopScanAllForbiddenCode int = 403

/*StopScanAllForbidden Forbidden

swagger:response stopScanAllForbidden
*/
type StopScanAllForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopScanAllForbidden creates StopScanAllForbidden with default headers values
func NewStopScanAllForbidden() *StopScanAllForbidden {

	return &StopScanAllForbidden{}
}

// WithXRequestID adds the xRequestId to the stop scan all forbidden response
func (o *StopScanAllForbidden) WithXRequestID(xRequestID string) *StopScanAllForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop scan all forbidden response
func (o *StopScanAllForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop scan all forbidden response
func (o *StopScanAllForbidden) WithPayload(payload *models.Errors) *StopScanAllForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop scan all forbidden response
func (o *StopScanAllForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopScanAllForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopScanAllInternalServerErrorCode is the HTTP code returned for type StopScanAllInternalServerError
const StopScanAllInternalServerErrorCode int = 500

/*StopScanAllInternalServerError Internal server error

swagger:response stopScanAllInternalServerError
*/
type StopScanAllInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopScanAllInternalServerError creates StopScanAllInternalServerError with default headers values
func NewStopScanAllInternalServerError() *StopScanAllInternalServerError {

	return &StopScanAllInternalServerError{}
}

// WithXRequestID adds the xRequestId to the stop scan all internal server error response
func (o *StopScanAllInternalServerError) WithXRequestID(xRequestID string) *StopScanAllInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop scan all internal server error response
func (o *StopScanAllInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop scan all internal server error response
func (o *StopScanAllInternalServerError) WithPayload(payload *models.Errors) *StopScanAllInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop scan all internal server error response
func (o *StopScanAllInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopScanAllInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
