// Code generated by go-swagger; DO NOT EDIT.

package scan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/goharbor/harbor/src/server/v2.0/models"
)

// StopScanArtifactAcceptedCode is the HTTP code returned for type StopScanArtifactAccepted
const StopScanArtifactAcceptedCode int = 202

/*StopScanArtifactAccepted Accepted

swagger:response stopScanArtifactAccepted
*/
type StopScanArtifactAccepted struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`
}

// NewStopScanArtifactAccepted creates StopScanArtifactAccepted with default headers values
func NewStopScanArtifactAccepted() *StopScanArtifactAccepted {

	return &StopScanArtifactAccepted{}
}

// WithXRequestID adds the xRequestId to the stop scan artifact accepted response
func (o *StopScanArtifactAccepted) WithXRequestID(xRequestID string) *StopScanArtifactAccepted {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop scan artifact accepted response
func (o *StopScanArtifactAccepted) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WriteResponse to the client
func (o *StopScanArtifactAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(202)
}

// StopScanArtifactBadRequestCode is the HTTP code returned for type StopScanArtifactBadRequest
const StopScanArtifactBadRequestCode int = 400

/*StopScanArtifactBadRequest Bad request

swagger:response stopScanArtifactBadRequest
*/
type StopScanArtifactBadRequest struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopScanArtifactBadRequest creates StopScanArtifactBadRequest with default headers values
func NewStopScanArtifactBadRequest() *StopScanArtifactBadRequest {

	return &StopScanArtifactBadRequest{}
}

// WithXRequestID adds the xRequestId to the stop scan artifact bad request response
func (o *StopScanArtifactBadRequest) WithXRequestID(xRequestID string) *StopScanArtifactBadRequest {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop scan artifact bad request response
func (o *StopScanArtifactBadRequest) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop scan artifact bad request response
func (o *StopScanArtifactBadRequest) WithPayload(payload *models.Errors) *StopScanArtifactBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop scan artifact bad request response
func (o *StopScanArtifactBadRequest) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopScanArtifactBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopScanArtifactUnauthorizedCode is the HTTP code returned for type StopScanArtifactUnauthorized
const StopScanArtifactUnauthorizedCode int = 401

/*StopScanArtifactUnauthorized Unauthorized

swagger:response stopScanArtifactUnauthorized
*/
type StopScanArtifactUnauthorized struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopScanArtifactUnauthorized creates StopScanArtifactUnauthorized with default headers values
func NewStopScanArtifactUnauthorized() *StopScanArtifactUnauthorized {

	return &StopScanArtifactUnauthorized{}
}

// WithXRequestID adds the xRequestId to the stop scan artifact unauthorized response
func (o *StopScanArtifactUnauthorized) WithXRequestID(xRequestID string) *StopScanArtifactUnauthorized {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop scan artifact unauthorized response
func (o *StopScanArtifactUnauthorized) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop scan artifact unauthorized response
func (o *StopScanArtifactUnauthorized) WithPayload(payload *models.Errors) *StopScanArtifactUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop scan artifact unauthorized response
func (o *StopScanArtifactUnauthorized) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopScanArtifactUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopScanArtifactForbiddenCode is the HTTP code returned for type StopScanArtifactForbidden
const StopScanArtifactForbiddenCode int = 403

/*StopScanArtifactForbidden Forbidden

swagger:response stopScanArtifactForbidden
*/
type StopScanArtifactForbidden struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopScanArtifactForbidden creates StopScanArtifactForbidden with default headers values
func NewStopScanArtifactForbidden() *StopScanArtifactForbidden {

	return &StopScanArtifactForbidden{}
}

// WithXRequestID adds the xRequestId to the stop scan artifact forbidden response
func (o *StopScanArtifactForbidden) WithXRequestID(xRequestID string) *StopScanArtifactForbidden {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop scan artifact forbidden response
func (o *StopScanArtifactForbidden) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop scan artifact forbidden response
func (o *StopScanArtifactForbidden) WithPayload(payload *models.Errors) *StopScanArtifactForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop scan artifact forbidden response
func (o *StopScanArtifactForbidden) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopScanArtifactForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopScanArtifactNotFoundCode is the HTTP code returned for type StopScanArtifactNotFound
const StopScanArtifactNotFoundCode int = 404

/*StopScanArtifactNotFound Not found

swagger:response stopScanArtifactNotFound
*/
type StopScanArtifactNotFound struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopScanArtifactNotFound creates StopScanArtifactNotFound with default headers values
func NewStopScanArtifactNotFound() *StopScanArtifactNotFound {

	return &StopScanArtifactNotFound{}
}

// WithXRequestID adds the xRequestId to the stop scan artifact not found response
func (o *StopScanArtifactNotFound) WithXRequestID(xRequestID string) *StopScanArtifactNotFound {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop scan artifact not found response
func (o *StopScanArtifactNotFound) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop scan artifact not found response
func (o *StopScanArtifactNotFound) WithPayload(payload *models.Errors) *StopScanArtifactNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop scan artifact not found response
func (o *StopScanArtifactNotFound) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopScanArtifactNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StopScanArtifactInternalServerErrorCode is the HTTP code returned for type StopScanArtifactInternalServerError
const StopScanArtifactInternalServerErrorCode int = 500

/*StopScanArtifactInternalServerError Internal server error

swagger:response stopScanArtifactInternalServerError
*/
type StopScanArtifactInternalServerError struct {
	/*The ID of the corresponding request for the response

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Errors `json:"body,omitempty"`
}

// NewStopScanArtifactInternalServerError creates StopScanArtifactInternalServerError with default headers values
func NewStopScanArtifactInternalServerError() *StopScanArtifactInternalServerError {

	return &StopScanArtifactInternalServerError{}
}

// WithXRequestID adds the xRequestId to the stop scan artifact internal server error response
func (o *StopScanArtifactInternalServerError) WithXRequestID(xRequestID string) *StopScanArtifactInternalServerError {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the stop scan artifact internal server error response
func (o *StopScanArtifactInternalServerError) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the stop scan artifact internal server error response
func (o *StopScanArtifactInternalServerError) WithPayload(payload *models.Errors) *StopScanArtifactInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stop scan artifact internal server error response
func (o *StopScanArtifactInternalServerError) SetPayload(payload *models.Errors) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StopScanArtifactInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
